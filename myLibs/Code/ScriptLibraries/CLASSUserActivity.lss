'++LotusScript Development Environment:2:5:(Options):0:74
Option Public
Option Declare



'++LotusScript Development Environment:2:5:(Forward):0:1
Declare Class NotesUserActivityEntry
Declare Class NotesUserActivity
Declare Class NotesUserActivityEntryExtended
Declare Class NotesACLActivity
Declare Sub Initialize
Declare Function Output_Error(FunctionName As String, ErrorLine As Integer, ContinueOnError As Integer)
Declare Sub Sort_Array (in_array As Variant)
Declare Function ConvertTIMEtoText(TIMESTRUCT As TIMEDATE) As String
Declare Function CreateActivityLogDocs(db As NotesDatabase, ua As NotesUserActivity, RemoveOldLogs As Boolean) As Boolean
Declare Function MaskedErrorStatus(StatusError As Integer) As Integer
Declare Function GetLongValue(inValue As Integer) As Long
Declare Function Output_Status_Error(StatusError As Integer, FunctionName As Variant, Description As String, LineNumber As Variant) As Boolean
Declare Function CreateDbUserActivityDoc(Db As NotesDatabase, ua As NotesUserActivity) As NotesDocument
Declare Sub Output_API_Error(FunctionName As String, Description As String, ErrorLine As Integer, APIErrorCode As Integer)
Declare Function Output_ErrorLog(FunctionName As String, ErrorLine As Integer) As NotesDocument

'++LotusScript Development Environment:2:5:(Declarations):0:10
%INCLUDE "lsconst.lss"

%REM
CLASSUserActivity - updated by Alex Elliott of AGECOM (http://www.agecom.com.au)

This class is an update of the original CLASSUserActivity code available for download from the Lotus Sandbox:
http://www.lotus.com/ldd/sandbox.nsf/0/c12a2fd2142758b68525688d00708397?OpenDocument

As of September 2010 access to the Sandbox is no longer available.  A copy of the Sandbox and original Class can be found at the following page:
http://sandboxlive.com/ldd/sandbox.nsf/ByCategory/c12a2fd2142758b68525688d00708397?OpenDocument


Application Updates
===================

June 2012
=========
* Fix memory leak in call to CopyMemoryString in GetNthUserActivityEntry function. (Special
thank you to 'Jasper Duizendstra' for pointing this out as well as providing the
solution for resolving the leak).
* Added 'CreateDbUserActivityDoc' function for creating / update the usage summary document
for a database.
* Added 'CreateActivityLogDocs' function for creating individual user activity log entries.

March 2010
==========
* Fixes to API function declarations to ensure the correct datatypes are supplied for function arguments (to match expected
compatible Lotus C-API data types).
- retUserCount in W32_NSFDbGetUserActivity is now correctly defined as an Integer
- handle in W32_OSLockObject is now defined as a Long.
- handle in W32_OSUnlockObject is now defined as a Long
- Return value for call to W32_OSMemFree is now retrieved.
- handle in W32_OSMemFree is now defined as a Long.
- hpvSource in CopyMemory is now defined as an Any.
- hpvSource in CopyMemoryString is now defined as an Any.
- Return value for call to W32_ConvertTIMEDATEToText is now retrieved.
* Reads object in NotesUserActivityEntry class is now defined as an Integer.
* Writes object in NotesUserActivityEntry class is now defined as an Integer.
* retUserCount object in NotesUserActivity class is now defined as an Integer.
* flgHasActivity object in NotesUserActivity class is now defined as a Boolean.
* If an error occurs in the GetNthUserActivityEntry function after the memory occupied by 'Me.rethUserInfo' is locked it is now
unlocked when the error handler catches the error.
* Call to 'PrevDayWrites' now correctly returns the Writes.
* Error Handling now implemented throughout the code.

This updated script library may be used and modified by anyone provided the above information remains with the code.

%END REM

' Global variables
Dim Session As NotesSession
Dim CurrDb As NotesDatabase
Dim ActivityLogsView As NotesView
Dim ActivitySummaryView As NotesView
Dim ErrorDescription As String
Dim IsWindowsPlatform As Boolean

' Constants
Const CASE_INSENSITIVE = 5
Const MAXALPHATIMEDATE = 80
Const MAXPATH = 256
Const MAXUSERNAME = 256
Const LEN_BYTE = 1
Const LEN_WORD = 2
Const LEN_DWORD = 4
Const LOCAL_SERVER = "- Local -"

' The API functions return errors as non-zero values hence zero is success
Const STATUS_SUCCESS = 0

' When working with the API, handles (always Long) are NULL or empty when they are equal to zero
Const NULLHANDLE = 0

' *************************************************
' Library Files
' *************************************************
Const LIB_W32 = "nnotes.dll"
Const LIB_ALPHA = "anotes.dll"
Const LIB_MAC = "NotesLib"
Const LIB_TUX = "libnotes.so"
Const LIB_OS400 = "/qsys.lib/qnotes.lib/libdomw.srvpgm"
Const LIB_OS2 = "lnotes.dll"
Const LIB_AIX = "libnotes_r.a"

' *************************************************
' Platforms
' *************************************************
Const PLATFORM_MAC = "Macintosh"
Const PLATFORM_W32 = "Windows/32"
Const PLATFORM_W64 = "Windows/64"
Const PLATFORM_OS400 = "OS/400"
Const PLATFORM_UNIX = "UNIX"
Const PLATFORM_LINUX = "Linux"

' API Errors
Const ERR_NOEXIST = 259
Const ERR_NO_MODIFIED_NOTES = 572
Const ERR_SPECIAL_ID = 578
Const ERR_NOACCESS = 582
Const ERR_NOT_FOUND = 1028
Const ERR_ITEM_NOT_FOUND = 546

Type TIMEDATE
	Innards(1) As Long
End Type

Const ODS_WORD = 0
Const ODS_DWORD = 1
Const ODS_BYTE = 3

Type DBACTIVITY
	First As TIMEDATE
	Last As TIMEDATE
	Uses As Long
	Reads As Long
	Writes As Long
	PrevDayUses As Long
	PrevDayReads As Long
	PrevDayWrites As Long
	PrevWeekUses As Long
	PrevWeekReads As Long
	PrevWeekWrites As Long
	PrevMonthUses As Long
	PrevMonthReads As Long
	PrevMonthWrites As Long
End Type

Type DBACTIVITY_ENTRY
	Time As TIMEDATE
	Reads As Integer
	Writes As Integer
	UserNameOffset As Long
End Type

Type DBACTIVITYEXTENDED
	First As TIMEDATE
	Last As TIMEDATE
	Uses As Long
	Reads As Long
	Writes As Long
	Adds As Long
	Updates As Long
	Deletes As Long
	PrevDayUses As Long
	PrevDayReads As Long
	PrevDayAdds As Long
	PrevDayUpdates As Long
	PrevDayDeletes As Long
	PrevWeekUses As Long
	PrevWeekReads As Long
	PrevWeekAdds As Long
	PrevWeekUpdates As Long
	PrevWeekDeletes As Long
	PrevMonthUses As Long
	PrevMonthReads As Long
	PrevMonthAdds As Long
	PrevMonthUpdates As Long
	PrevMonthDeletes As Long
End Type

Type DBACTIVITY_ENTRY_EXTENDED
	Time As TIMEDATE
	Reads As Integer
	Adds As Integer
	Updates As Integer
	Deletes As Integer
	NonDataReads As Integer
	NonDataAdds As Integer
	NonDataUpdates As Integer
	NonDataDeletes As Integer
	UserNameOffset As Long
End Type

' Windows API Declarations
Declare Function strlenLP Lib "kernel32" Alias "lstrlenA" (ByVal lpString As Long) As Long
Declare Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" ( hpvDest As Any, ByVal hpvSource As Any, ByVal cbCopy As Long)
Declare Sub CopyMemoryString Lib "kernel32" Alias "RtlMoveMemory" ( ByVal hpvDest As String, ByVal hpvSource As Any, ByVal cbCopy As Long)
Declare Function NEMMessageBox Lib "nnotesws" ( wHandle As Integer, ByVal szMessage As String, ByVal szTitle As String, ByVal wType As Integer) As Integer
Declare Function NEMPostStatus Lib "nnotesws" (ByVal szText As String) As Long

Declare Function MoveMemory Lib LIB_W32 Alias "Cmovmem" (ByVal source As Long, Dest As Any, ByVal Length As Long) As Integer
Declare Sub W32_ODSReadMemory Lib LIB_W32 Alias "ODSReadMemory" (pSource As Long, ByVal typeODS As Integer, pDest As Any, ByVal Iterations As Integer)
Declare Sub W64_ODSReadMemory Lib LIB_W32 Alias "ODSReadMemory" (pSource As Long, ByVal typeODS As Integer, pDest As Any, ByVal Iterations As Integer)
Declare Sub W64_ODSReadMemoryStr Lib LIB_W32 Alias "ODSReadMemory" (pSource As Long, ByVal typeODS As Integer, ByVal pDest As LMBCS String, ByVal Iterations As Integer)

' Lotus API Declarations
Declare Function W32_NSFDbOpen Lib LIB_W32 Alias "NSFDbOpen" ( Byval dbName As LMBCS String, hDb As Long) As Integer
Declare Function W32_NSFDbClose Lib LIB_W32 Alias "NSFDbClose" ( Byval hDb As Long) As Integer
Declare Function W32_NSFDbGetUserActivity Lib LIB_W32 Alias "NSFDbGetUserActivity" ( Byval hDB As Long, Byval flags As Long, retDbActivity As DBActivity, rethUserInfo As Long, retUserCount As Integer) As Integer
Declare Function W32_NSFDbGetUserActivityExtended Lib LIB_W32 Alias "NSFDbGetUserActivityExtended" ( ByVal hDB As Long, ByVal flags As Long, retDbActivity As DBActivityExtended, rethUserInfo As Long, retUserCount As Integer) As Integer
Declare Function W32_NSFDbMajorMinorVersionGet Lib LIB_W32 Alias "NSFDbMajorMinorVersionGet"(ByVal hDB As Long, retMajorVersion As Integer, retMinorVersion As Integer) As Integer
Declare Function W32_NSFDbReadACL Lib LIB_W32 Alias "NSFDbReadACL" (ByVal hDb As Long, hACL As Long) As Integer
Declare Function W32_ACLGetHistory Lib LIB_W32 Alias "ACLGetHistory" (ByVal hACL As Long, hHistory As Long, historyCount As Integer) As Integer

Declare Function W32_OSLockObject Lib LIB_W32 Alias "OSLockObject" ( Byval handle As Long) As Long
Declare Function W64_OSLockObject Lib LIB_W32 Alias "OSLockObject" (ByVal memHandle As Long) As Long

Declare Function W32_OSLockObjectDbl Lib LIB_W32 Alias "OSLockObject" ( ByVal handle As Long) As Double

Declare Function W32_OSLoadString Lib LIB_W32 Alias "OSLoadString" (Byval handle As Long, Byval S As Integer, Byval B As String, Byval nB As Integer) As Integer
Declare Function W32_OSPathNetConstruct Lib LIB_W32 Alias "OSPathNetConstruct" (ByVal NullPort As Long, ByVal Server As LMBCS String, ByVal File As LMBCS String, ByVal PathNet As LMBCS String) As Integer
Declare Sub W32_OSUnlockObject Lib LIB_W32 Alias "OSUnlockObject" (Byval handle As Long)
Declare Function W32_OSMemFree Lib LIB_W32 Alias "OSMemFree" (Byval handle As Long) As Integer
Declare Function W32_ConvertTIMEDATEToText Lib LIB_W32 Alias "ConvertTIMEDATEToText" (Byval IntlFormat As Long,Byval TextFormat As Long, actTIMEDATE As TIMEDATE, Byval retTextBuffer As String,Byval TextBufferLength As Integer,retTextLength As Integer) As Integer
Class NotesUserActivityEntry
	Public UserName As String
	Public Reads As Integer
	Public Writes As Integer
	Public Time As String
End Class
Class NotesUserActivity
	Private hDb As Long
	Private pDbActivity As DBACTIVITY
	Private pDbActivityExtended As DBACTIVITYEXTENDED
	Private rethUserInfo As Long
	Private retUserCount As Integer
	Private dbVersionMajor As Integer
	Private dbVersionMinor As Integer
	Private flgHasActivity As Boolean
	Private useExtended As Boolean
	
	Sub New (inputDbServer As String, inputDbPath As String)
		Dim StatusResult As Integer
		Dim DbOpened As Boolean
		Dim NetPath As String
		
		' Error Handler
		On Error GoTo Error_Handler
		
		Me.flgHasActivity = False
		
		NetPath = Space(MAXPATH)
		StatusResult = W32_OSPathNetConstruct(0, inputDbServer, inputDbPath, NetPath)
		If StatusResult <> STATUS_SUCCESS Then
			' Couldn't build the database path
			Call Output_Status_Error(StatusResult, "ClassUserActivity - NotesUserActivity Class (New)", "Call to OSPathNetConstruct failed", GetThreadInfo(LSI_THREAD_LINE)-3)
			Exit Sub
		End If
		
		' Open the target database
		StatusResult = W32_NSFDbOpen(NetPath, Me.hDb)
		If StatusResult <> STATUS_SUCCESS Then
			' Database failed to open
			Call Output_Status_Error(StatusResult, "ClassUserActivity - NotesUserActivity Class (New)", "Call to NSFDbOpen failed", GetThreadInfo(LSI_THREAD_LINE)-3)
			Exit Sub
		End If
		
		' Get the ODS version of the database
		StatusResult = W32_NSFDbMajorMinorVersionGet(Me.hDb, Me.dbVersionMajor, Me.dbVersionMinor)
		If Me.dbVersionMajor >= 48 Then
			Me.useExtended = True
		End If
		
		' Get the Summary User information
		If Me.useExtended Then
			StatusResult = W32_NSFDbGetUserActivityExtended(Me.hDb, &h0, Me.pDbActivityExtended, Me.rethUserInfo, Me.retUserCount)
			If StatusResult <> STATUS_SUCCESS Then
				' Couldn't get handle to database user activity
				If StatusResult = ERR_NOACCESS Then
					' Not authorized to access ... add custom error handling / logging here
					Print "Not authorized to access user activity for database"
				Else
					Call Output_Status_Error(StatusResult, "ClassUserActivity - NotesUserActivity Class (New)", "Call to NSFDbGetUserActivityExtended failed", GetThreadInfo(LSI_THREAD_LINE)-7)
				End If
				Exit Sub
			End If
		Else
			StatusResult = W32_NSFDbGetUserActivity(Me.hDb, &h0, Me.pDbActivity, Me.rethUserInfo, Me.retUserCount)
			If StatusResult <> STATUS_SUCCESS Then
				' Couldn't get handle to database user activity
				If StatusResult = ERR_NOACCESS Then
					' Not authorized to access ... add custom error handling / logging here
					Print "Not authorized to access user activity for database"
				Else
					Call Output_Status_Error(StatusResult, "ClassUserActivity - NotesUserActivity Class (New)", "Call to NSFDbGetUserActivity failed", GetThreadInfo(LSI_THREAD_LINE)-7)
				End If
				Exit Sub
			End If
		End If
		
		If retUserCount > 0 Then
			' User activity was found
			Me.flgHasActivity = True
		End If
		
		Exit Sub
		
Error_Handler:
		Call Output_Error("ClassUserActivity Script Library - NotesUserActivity (New)", Erl, True)
		Exit Sub
	End Sub 
	
	Sub Delete
		Dim StatusResult As Integer
		
		' Error Handler
		On Error Goto Error_Handler
		
		If Me.flgHasActivity Then
			Call W32_OSMemFree(rethUserInfo)
		End If
		
		If hDb <> 0 Then
			StatusResult = W32_NSFDbClose(hDb)
			hDb = 0
			If StatusResult <> STATUS_SUCCESS Then
				' Database failed to close properly
				Call Output_Status_Error(StatusResult, "ClassUserActivity - NotesUserActivity Class (Delete)", "Call to NSFDbClose failed", Getthreadinfo(LSI_THREAD_LINE)-4)
			End If
		End If
		
		Exit Sub
		
Error_Handler:
		Call Output_Error("ClassUserActivity Script Library - NotesUserActivity (Delete)", Erl, True)
		Exit Sub
	End Sub
	
	Public Function IsExtended As Boolean
		IsExtended = Me.useExtended
	End Function
	
	' Global Times
	Public Function First As String
		' Error Handler
		On Error Goto Error_Handler
		
		If me.useExtended Then
			First = ConvertTIMEtoText(Me.pDbActivityExtended.First)
		Else
			First = ConvertTIMEtoText(Me.pDbActivity.First)			
		End If
		
		Exit Function
		
Error_Handler:
		Call Output_Error("ClassUserActivity Script Library - NotesUserActivity (First)", Erl, True)
		Exit Function
	End Function
	
	Public Function Last As String
		' Error Handler
		On Error Goto Error_Handler

		If me.useExtended Then
			Last = ConvertTIMEtoText(Me.pDbActivityExtended.Last)
		Else
			Last = ConvertTIMEtoText(Me.pDbActivity.Last)
		End If
		Exit Function
		
Error_Handler:
		Call Output_Error("ClassUserActivity Script Library - NotesUserActivity (Last)", Erl, True)
		Exit Function
	End Function
	
	' Total summary
	Public Function Uses As Long
		If me.useExtended Then
			Uses = Me.pDbActivityExtended.Uses
		Else
			Uses = Me.pDbActivity.Uses
		End If
	End Function
	
	Public Function Reads As Long
		If me.useExtended Then
			Reads = Me.pDbActivityExtended.Reads
		Else
			Reads = Me.pDbActivity.Reads
		End If
	End Function
	
	Public Function Writes As Long
		If me.useExtended Then
			Writes = Me.pDbActivityExtended.Adds + Me.pDbActivityExtended.Updates + Me.pDbActivityExtended.Deletes
		Else
			Writes = Me.pDbActivity.Writes
		End If
	End Function
	
	Public Function Adds As Long
		If me.useExtended Then
			Adds = Me.pDbActivityExtended.Adds
		Else
			Adds = 0
		End If
	End Function
	
	Public Function Updates As Long
		If me.useExtended Then
			Updates = Me.pDbActivityExtended.Updates
		Else
			Updates = 0
		End If
	End Function
	
	Public Function Deletes As Long
		If me.useExtended Then
			Deletes = Me.pDbActivityExtended.Deletes
		Else
			Deletes = 0
		End If
	End Function
	
	' Day summary
	Public Function PrevDayUses As Long
		If me.useExtended Then
			PrevDayUses = Me.pDbActivityExtended.PrevDayUses
		Else
			PrevDayUses = Me.pDbActivity.PrevDayUses
		End If     
	End Function
	
	Public Function PrevDayReads As Long
		If me.useExtended Then
			PrevDayReads = Me.pDbActivityExtended.PrevDayReads
		Else
			PrevDayReads = Me.pDbActivity.PrevDayReads
		End If			
	End Function
	
	Public Function PrevDayWrites As Long
		If me.useExtended Then
			PrevDayWrites = Me.pDbActivityExtended.PrevDayAdds + Me.pDbActivityExtended.PrevDayUpdates + Me.pDbActivityExtended.PrevDayDeletes
		Else
			PrevDayWrites = Me.pDbActivity.PrevDayWrites
		End If
	End Function
	
	Public Function PrevDayAdds As Long
		If me.useExtended Then
			PrevDayAdds = Me.pDbActivityExtended.PrevDayAdds
		Else
			PrevDayAdds = 0
		End If
	End Function
	
	Public Function PrevDayUpdates As Long
		If me.useExtended Then
			PrevDayUpdates = Me.pDbActivityExtended.PrevDayUpdates
		Else
			PrevDayUpdates = 0
		End If
	End Function
	
	Public Function PrevDayDeletes As Long
		If me.useExtended Then
			PrevDayDeletes = Me.pDbActivityExtended.PrevDayDeletes
		Else
			PrevDayDeletes = 0
		End If
	End Function
	
	' Week summary
	Public Function PrevWeekUses As Long
		If me.useExtended Then
			PrevWeekUses = Me.pDbActivityExtended.PrevWeekUses
		Else
			PrevWeekUses = Me.pDbActivity.PrevWeekUses
		End If
	End Function
	
	Public Function PrevWeekReads As Long
		If me.useExtended Then
			PrevWeekReads = Me.pDbActivityExtended.PrevWeekReads
		Else
			PrevWeekReads = Me.pDbActivity.PrevWeekReads
		End If
	End Function
	
	Public Function PrevWeekWrites As Long
		If me.useExtended Then
			PrevWeekWrites = Me.pDbActivityExtended.PrevWeekAdds + Me.pDbActivityExtended.PrevWeekUpdates + Me.pDbActivityExtended.PrevWeekDeletes
		Else
			PrevWeekWrites = Me.pDbActivity.PrevWeekWrites
		End If
	End Function
	
	Public Function PrevWeekAdds As Long
		If me.useExtended Then
			PrevWeekAdds = Me.pDbActivityExtended.PrevWeekAdds
		Else
			PrevWeekAdds = 0
		End If
	End Function
	
	Public Function PrevWeekUpdates As Long
		If me.useExtended Then
			PrevWeekUpdates = Me.pDbActivityExtended.PrevWeekUpdates
		Else
			PrevWeekUpdates = 0
		End If
	End Function
	
	Public Function PrevWeekDeletes As Long
		If me.useExtended Then
			PrevWeekDeletes = Me.pDbActivityExtended.PrevWeekDeletes
		Else
			PrevWeekDeletes = 0
		End If
	End Function
	
	' Month summary
	Public Function PrevMonthUses As Long
		If me.useExtended Then
			PrevMonthUses = Me.pDbActivityExtended.PrevMonthUses
		Else
			PrevMonthUses = Me.pDbActivity.PrevMonthUses
		End If
	End Function
	
	Public Function PrevMonthReads As Long
		If me.useExtended Then
			PrevMonthReads = Me.pDbActivityExtended.PrevMonthReads
		Else
			PrevMonthReads = Me.pDbActivity.PrevMonthReads
		End If
	End Function
	
	Public Function PrevMonthWrites As Long
		If me.useExtended Then
			PrevMonthWrites = Me.pDbActivityExtended.PrevMonthAdds + Me.pDbActivityExtended.PrevMonthUpdates + Me.pDbActivityExtended.PrevMonthDeletes
		Else
			PrevMonthWrites = Me.pDbActivity.PrevMonthWrites
		End If
	End Function
	
	Public Function PrevMonthAdds As Long
		If me.useExtended Then
			PrevMonthAdds = Me.pDbActivityExtended.PrevMonthAdds
		Else
			PrevMonthAdds = 0
		End If
	End Function
	
	Public Function PrevMonthUpdates As Long
		If me.useExtended Then
			PrevMonthUpdates = Me.pDbActivityExtended.PrevMonthUpdates
		Else
			PrevMonthUpdates = 0
		End If
	End Function
	
	Public Function PrevMonthDeletes As Long
		If me.useExtended Then
			PrevMonthDeletes = Me.pDbActivityExtended.PrevMonthDeletes
		Else
			PrevMonthDeletes = 0
		End If
	End Function
	
	Public Function UserActivityCount As Integer
		UserActivityCount = Me.retUserCount
	End Function
	
	Public Function HasUserActivity As Boolean
		HasUserActivity = Me.flgHasActivity
	End Function
	
	'Public Function Parent As NotesDatabase
	'	Set Parent = prvdb
	'End Function
	
	Public Function GetNthUserActivityEntry(inpEntry As Integer) As NotesUserActivityEntry
		Dim puActivity As Long
		Dim lEntry As Integer
		Dim puActivityEntry As DBACTIVITY_ENTRY
		Dim StructureOffset As Long
		Dim UsernameOffset As Long
		Dim spUsername As String * MAXUSERNAME
		Dim sUsername As String
		Dim nuae As New NotesUserActivityEntry
		
		' Error Handler
		On Error Goto Error_Handler
		
		lEntry = inpEntry - 1
		
		If Not Me.flgHasActivity Then
			Error 14104, "NotesUserActivity: No activity available"
		End If
		
		If lEntry > Me.retUserCount Or lEntry < 0 Then
			Error 14103, "NotesUserActivity: Subscript out of range."
		End If
		
		' Lock the structure get the required entry
		puActivity = W32_OSLockObject(Me.rethUserInfo)
		
		StructureOffset = puActivity + (LenB(puActivityEntry) * lEntry)
		Call CopyMemory (puActivityEntry, StructureOffset, Len(puActivityEntry))
		
		' Load the User name for the Activity Structure
		UsernameOffset = puActivity + puActivityEntry.UserNameOffset
		spUsername = Space(MAXUSERNAME)
		Call CopyMemoryString(spUsername, UsernameOffset, strlenLP(UsernameOffset))
		sUserName = Trim(spUsername)
		
		With nuae
			.UserName = sUserName
			.Reads = puActivityEntry.Reads
			.Writes = puActivityEntry.Writes
			.Time = ConvertTIMEtoText(puActivityEntry.Time)
		End With
		
		Call W32_OSUnlockObject(Me.rethUserInfo)
		puActivity = 0
		
		Set GetNthUserActivityEntry = nuae
		Exit Function
		
Error_Handler:
		If puActivity <> 0 Then
			' Unlock
			Call W32_OSUnlockObject(Me.rethUserInfo)
		End If
		Call Output_Error("ClassUserActivity Script Library - NotesUserActivity (GetNthUserActivityEntry)", Erl, True)
		Exit Function
	End Function
	
	Public Function GetNthUserActivityEntryExtended(inpEntry As Integer) As NotesUserActivityEntryExtended
		Dim puActivity As Long
		Dim lEntry As Integer
		Dim puActivityEntryExtended As DBACTIVITY_ENTRY_EXTENDED
		Dim StructureOffset As Long
		Dim UsernameOffset As Long
		Dim spUsername As String * MAXUSERNAME
		Dim sUsername As String
		Dim nuaeExtended As New NotesUserActivityEntryExtended
		Dim StatusResult As Integer
		
		' Error Handler
		On Error GoTo Error_Handler
		
		lEntry = inpEntry - 1
		
		If Not Me.flgHasActivity Then
			Error 14104, "NotesUserActivityExtended: No activity available"
		End If
		
		If lEntry > Me.retUserCount Or lEntry < 0 Then
			Error 14103, "NotesUserActivityExtended: Subscript out of range."
		End If
		
		' Lock the structure get the required entry
		puActivity = W32_OSLockObject(Me.rethUserInfo)

		StructureOffset = puActivity + (LenB(puActivityEntryExtended) * lEntry)
		Call CopyMemory (puActivityEntryExtended, StructureOffset, Len(puActivityEntryExtended))

		' Load the User name for the Activity Structure
		UsernameOffset = puActivity + puActivityEntryExtended.UserNameOffset
		spUsername = Space(MAXUSERNAME)
		Call CopyMemoryString(spUsername, UsernameOffset, strlenLP(UsernameOffset))
		sUserName = Trim(spUsername)

		With nuaeExtended
			.UserName = sUserName
			.Reads = puActivityEntryExtended.Reads
			.Adds = puActivityEntryExtended.Adds
			.Updates = puActivityEntryExtended.Updates
			.Deletes = puActivityEntryExtended.Deletes
			.NonDataReads = puActivityEntryExtended.NonDataReads
			.NonDataAdds = puActivityEntryExtended.NonDataAdds
			.NonDataUpdates = puActivityEntryExtended.NonDataUpdates
			.NonDataDeletes = puActivityEntryExtended.NonDataDeletes
			.Time = ConvertTIMEtoText(puActivityEntryExtended.Time)
		End With
		
		Call W32_OSUnlockObject(Me.rethUserInfo)
		
		puActivity = 0
		
		Set GetNthUserActivityEntryExtended = nuaeExtended
		Exit Function
		
Error_Handler:
		If puActivity <> 0 Then
			' Unlock
			Call W32_OSUnlockObject(Me.rethUserInfo)
		End If
		Call Output_Error("ClassUserActivity Script Library - NotesUserActivity (GetNthUserActivityEntryExtended)", Erl, True)
		Exit Function
	End Function
End Class
Class NotesUserActivityEntryExtended
	Public UserName As String
	Public Reads As Integer
	Public Adds As Integer
	Public Updates As Integer
	Public Deletes As Integer
	Public NonDataReads As Integer
	Public NonDataAdds As Integer
	Public NonDataUpdates As Integer
	Public NonDataDeletes As Integer
	Public Time As String
End Class
Class NotesACLActivity
	Private ThisDatabase As NotesDatabase
	
	Sub New(Db As NotesDatabase)
		' Error Handler
		On Error GoTo Error_Handler
		
		Set Me.ThisDatabase = Db
		Exit Sub
		
Error_Handler:
		Call ClassErrorHandler("New")
		Exit Sub
	End Sub
	
	Function GetACL() As Variant
		Dim ACL As NotesACL
		Dim ACLEntry As NotesACLEntry
		Dim UserName As NotesName
		Dim NumEntries As Integer
		Dim ReturnVar As Variant
		Dim TempString As String
		Dim UserOptions As String
		Dim UserRoles As String
		
		' Error Handler
		On Error GoTo Error_Handler
		
		If Me.ThisDatabase Is Nothing Then
			' Database handle is null
			Exit Function
		End If
		
		Set ACL = Me.ThisDatabase.ACL
		If ACL Is Nothing Then
			Exit Function
		End If

		Set ACLEntry = ACL.GetFirstEntry
		While Not ACLEntry Is Nothing
			Set UserName = New NotesName(ACLEntry.Name)
			
			TempString = ""
			UserOptions = ""
			UserRoles = ""
			
			TempString = UserName.Abbreviated & "!!"
			
			If ACLEntry.Level = ACLLEVEL_MANAGER Then
				TempString = TempString & "Manager"
			ElseIf ACLEntry.Level = ACLLEVEL_DESIGNER Then
				TempString = TempString & "Designer"
			ElseIf ACLEntry.Level = ACLLEVEL_EDITOR Then
				TempString = TempString & "Editor"
			ElseIf ACLEntry.Level = ACLLEVEL_AUTHOR Then
				TempString = TempString & "Author"
			ElseIf ACLEntry.Level = ACLLEVEL_READER Then
				TempString = TempString & "Reader"
			ElseIf ACLEntry.Level = ACLLEVEL_DEPOSITOR Then
				TempString = TempString & "Depositor"
			ElseIf ACLEntry.Level = ACLLEVEL_NOACCESS Then
				TempString = TempString & "No Access"
			Else
				TempString = TempString & "Unknown"
			End If
			
			TempString = TempString & "!!"
			
			If ACLEntry.UserType = ACLTYPE_UNSPECIFIED Then
				TempString = TempString & "Unspecified"
			ElseIf ACLEntry.UserType = ACLTYPE_PERSON Then
				TempString = TempString & "Person"
			ElseIf ACLEntry.UserType = ACLTYPE_SERVER Then
				TempString = TempString & "Server"
			ElseIf ACLEntry.UserType = ACLTYPE_MIXED_GROUP Then
				TempString = TempString & "Mixed Group"
			ElseIf ACLEntry.UserType = ACLTYPE_PERSON_GROUP Then
				TempString = TempString & "Person Group"
			ElseIf ACLEntry.UserType = ACLTYPE_SERVER_GROUP Then
				TempString = TempString & "Server Group"
			Else
				TempString = TempString & "Unknown"
			End If
			
			If ACLEntry.CanCreateDocuments Then
				If UserOptions <> "" Then
					UserOptions = UserOptions & ","
				End If
				UserOptions = UserOptions & "Create Documents"
			End If
			
			If ACLEntry.CanDeleteDocuments Then
				If UserOptions <> "" Then
					UserOptions = UserOptions & ","
				End If
				UserOptions = UserOptions & "Delete Documents"
			End If
			
			If ACLEntry.CanCreatePersonalAgent Then
				If UserOptions <> "" Then
					UserOptions = UserOptions & ","
				End If
				UserOptions = UserOptions & "Create Private Agents"
			End If
			
			If ACLEntry.CanCreatePersonalFolder Then
				If UserOptions <> "" Then
					UserOptions = UserOptions & ","
				End If
				UserOptions = UserOptions & "Create Personal Folders / Views"
			End If
			
			If ACLEntry.CanCreateSharedFolder Then
				If UserOptions <> "" Then
					UserOptions = UserOptions & ","
				End If
				UserOptions = UserOptions & "Create Shared Folders / Views"
			End If
			
			If ACLEntry.CanCreateLSOrJavaAgent Then
				If UserOptions <> "" Then
					UserOptions = UserOptions & ","
				End If
				UserOptions = UserOptions & "Create LotusScript / Java Agents"
			End If
			
			If ACLEntry.IsPublicReader Then
				If UserOptions <> "" Then
					UserOptions = UserOptions & ","
				End If
				UserOptions = UserOptions & "Read Public Documents"
			End If
			
			If ACLEntry.IsPublicWriter Then
				If UserOptions <> "" Then
					UserOptions = UserOptions & ","
				End If
				UserOptions = UserOptions & "Write Public Documents"
			End If
			
			If ACLEntry.CanReplicateOrCopyDocuments Then
				If UserOptions <> "" Then
					UserOptions = UserOptions & ","
				End If
				UserOptions = UserOptions & "Replicate / Copy Documents"
			End If
			
			TempString = TempString & "!!"
			
			If UserOptions <> "" Then
				TempString = TempString & UserOptions
			Else
				TempString = TempString & " "
			End If
			
			If Not IsEmpty(ACLEntry.Roles) Then
				ForAll v_Role In ACLEntry.Roles
					If Trim(v_Role) <> "" Then
						If UserRoles <> "" Then
							UserRoles = UserRoles & ","
						End If
						UserRoles = UserRoles & v_Role
					End If
				End ForAll
			End If
			
			TempString = TempString & "!!"
			
			If UserRoles <> "" Then
				TempString = TempString & UserRoles
			Else
				TempString = TempString & " "
			End If
			
			If NumEntries = 0 Then
				ReDim ReturnVar(0)
			Else
				ReDim Preserve ReturnVar(NumEntries)
			End If
			
			ReturnVar(NumEntries) = TempString
			NumEntries = NumEntries + 1
			
			Set ACLEntry = ACL.GetNextEntry(ACLEntry)
		Wend
		
		If NumEntries > 1 Then
			Call Sort_Array(ReturnVar)
		End If

		GetACL = ReturnVar
		Exit Function
		
Error_Handler:
		Call ClassErrorHandler("GetACL")
		Exit Function
	End Function
	
	Function GetACLHistory() As Variant
		' Retrieve the ACL History for the specified database
		Dim ErrorPending As Boolean
		Dim hACL As Long
		Dim hDb As Long
		Dim hHistory As Long
		Dim hHistoryCount As Integer
		Dim HistoryLogChar As String
		Dim HistoryLogItem As String
		Dim hLock As Long
		Dim i As Integer
		Dim NetPath As String
		Dim NumEntries As Integer
		Dim ReturnVar As Variant
		Dim StatusResult As Integer
		
		' Error Handler
		On Error GoTo Error_Handler
		
		If Me.ThisDatabase Is Nothing Then
			' Database handle is null
			Exit Function
		End If
		
%rem
		' ********************************************
		' Retrieve activity log via Notes API		
		' ********************************************
		NetPath = Space(MAXPATH)
		StatusResult = W32_OSPathNetConstruct(0, Me.ThisDatabase.Server, Me.ThisDatabase.FilePath, NetPath)
		If StatusResult <> STATUS_SUCCESS Then
			' Couldn't build the database path
			Call Output_Status_Error(StatusResult, "ClassUserActivity - NotesACLActivity Class (GetACLHistory)", "Call to OSPathNetConstruct failed", GetThreadInfo(LSI_THREAD_LINE)-3)
			Exit Function
		End If
		
		' Open the target database
		StatusResult = W32_NSFDbOpen(NetPath, hDb)
		If StatusResult <> STATUS_SUCCESS Then
			' Database failed to open
			Call Output_Status_Error(StatusResult, "ClassUserActivity - NotesACLActivity Class (GetACLHistory)", "Call to NSFDbOpen failed", GetThreadInfo(LSI_THREAD_LINE)-3)
			Exit Function
		End If
		
		' Read the ACL into memory 
		StatusResult = W32_NSFDbReadACL(hDb, hACL)
		If StatusResult <> STATUS_SUCCESS Then
			' Could not read the ACL
			Call Output_Status_Error(StatusResult, "ClassUserActivity - NotesACLActivity Class (GetACLHistory)", "Could not read the database ACL", GetThreadInfo(LSI_THREAD_LINE)-3)
			GoTo Exit_Function
		End If
		
		' Retrieve the ACL history
		StatusResult = W32_ACLGetHistory(hACL, hHistory, hHistoryCount)
		If StatusResult <> STATUS_SUCCESS Then
			' Could not retrieve the ACL history
			Call Output_Status_Error(StatusResult, "ClassUserActivity - NotesACLActivity Class (GetACLHistory)", "Could not read the database ACL", GetThreadInfo(LSI_THREAD_LINE)-3)
			GoTo Exit_Function
		End If
		
		If hHistoryCount = 0 Then
			' No history was found in the ACL
			GoTo Exit_Function
		End If
		
		' Lock down the handle to the history 
		hLock = W32_OSLockObject(hHistory)

		Do While i < hHistoryCount
			' extract history one character at a time using Win32 API call 
			HistoryLogChar = String(1, 0) 
			Call CopyMemoryString(HistoryLogChar, hLock, 1)

			If HistoryLogChar = Chr$(0) Then 
				' If we encounter a null character, there will be one following it (e.g., LastEntry\0\0PrevEntry\0\0),
				' so advance pointer two steps, copy current entry to array then get the next entry 
				i = i + 1
				'hLock = hLock + 2
				hLock = hLock + 1
				
				If NumEntries = 0 Then
					ReDim ReturnVar(0)
				Else
					ReDim Preserve ReturnVar(NumEntries)
				End If
				
				ReturnVar(NumEntries) = HistoryLogItem
				NumEntries = NumEntries + 1
				
				HistoryLogItem = ""
			Else 
				' Advanced pointer one char at a time, and build a history entry 
				hLock& = hLock& + 1 
				HistoryLogItem = HistoryLogItem + HistoryLogChar
			End If 
		Loop 
		
Exit_Function:
		If ErrorPending Then
			' Prevents infinite error loop from occurring
			On Error Resume Next
		End If
		
		' Release the  and free the history handle
		If hLock <> 0 Then
			Call W32_OSUnlockObject(hHistory)
			Call W32_OSMemFree(hHistory)
		End If

		' Free ACL Handle
		If hACL <> 0 Then
			Call W32_OSMemFree(hACL)
		End If
		
		' Close the database
		If hDb <> 0 Then
			Call W32_NSFDbClose(hDb)
		End If
%endrem

		' ********************************************
		' Retrieve activity log via LotusScript		
		' ********************************************
		If Not IsEmpty(Me.ThisDatabase.ACLActivityLog) Then
			ForAll v_ActivityLog In Me.ThisDatabase.ACLActivityLog
				If NumEntries = 0 Then
					ReDim ReturnVar(0)
				Else
					ReDim Preserve ReturnVar(NumEntries)
				End If
				
				ReturnVar(NumEntries) = v_ActivityLog
				NumEntries = NumEntries + 1
			End ForAll
		End If

Exit_Function:
		GetACLHistory = ReturnVar
		Exit Function
		
Error_Handler:
		Call ClassErrorHandler("GetACLHistory")
		ErrorPending = True
		Resume Exit_Function
	End Function
	
	Sub Delete
	
	End Sub
	
	Sub ClassErrorHandler(FunctionName As String)
		Call Output_Error("ClassUserActivity Script Library - NotesACLActivity (" & FunctionName & ")", Erl, True)
		Exit Sub
	End Sub
	
End Class
'++LotusScript Development Environment:2:2:Initialize:1:10
Sub Initialize
	Set Session = New NotesSession
	Set CurrDb = Session.CurrentDatabase
End Sub

'++LotusScript Development Environment:2:1:Output_Error:1:8
Function Output_Error(FunctionName As String, ErrorLine As Integer, ContinueOnError As Integer)
	' Output the error that has occurred
	Dim ErrorString As String
	Dim ErrorSession As New NotesSession
	Dim IgnoreError As Boolean
	Dim NewLine As String
	
	' Exit function if ErrorLine is 0
	If ErrorLine = 0 Then
		' Not a valid error
		ErrorDescription = ""
		Exit Function
	End If
	
	' Error handler
	On Error Resume Next
	
	If Trim(ErrorDescription) = "" Then
		ErrorDescription = Error$
	ElseIf Len(ErrorDescription) > 20000 Then
		ErrorDescription = Left(ErrorDescription, 1000) & "...<truncated>..." & Right(ErrorDescription, 1000)
	End If
	
	' Check for errors to ignore
	If InStr(1, LCase(ErrorDescription), "stopped at your request") > 0 Then
		IgnoreError = True
	ElseIf InStr(1, LCase(ErrorDescription), "server not responding") > 0 Then
		IgnoreError = True
	ElseIf InStr(1, LCase(ErrorDescription), "server is not responding") > 0 Then
		IgnoreError = True
	End If
	
	If IgnoreError Then
		ErrorDescription = ""
		Exit Function
	End If	
	
	Call Output_ErrorLog(FunctionName, ErrorLine)
	
	' Format the error for printing and outputting to the error log
	If ErrorSession.IsOnServer Then
		' Format the error for output to server
		NewLine = ", "
		ErrorString = "The following error has occurred: "
		ErrorString = ErrorString & "Function - " & FunctionName & NewLine
		ErrorString = ErrorString & "Line - " & Trim(Cstr(ErrorLine)) & NewLine
		ErrorString = ErrorString & "Error - " & Trim(Cstr(Err)) & NewLine
		ErrorString = ErrorString & "Details - " & Error$
		
		Print ErrorString
		
		ErrorDescription = ""	
		
		If ContinueOnError Then
			' ContinueOnError is true.  Return execution to the calling function
			Exit Function
		Else
			' ContinueOnError is false.  Abort execution
			End
		End If
	Else
		' This is being called from an agent being manually run.
		' Error details will be displayed in a message box
		NewLine = Chr(13)
		ErrorString = "The following error has occurred:" & NewLine
		ErrorString = ErrorString & "Function - " & FunctionName & NewLine
		ErrorString = ErrorString & "Line - " & Trim(CStr(ErrorLine)) & NewLine
		ErrorString = ErrorString & "Error - " & Trim(CStr(Err)) & NewLine
		ErrorString = ErrorString & "Details - " & Error$ & NewLine & NewLine
		ErrorString = ErrorString & "Would you like to continue processing?"
		
		If MessageBox(ErrorString, MB_YESNO + MB_ICONSTOP, "Processing Error") = IDNO Then
			' The no button was clicked
			End
		End If
	End If
	
End Function

'++LotusScript Development Environment:2:2:Sort_Array:1:8
Sub Sort_Array (in_array As Variant)
	' Error Handler
	On Error GoTo Error_Handler
	
	'returns a sorted array based on a complexity of O(n^2) using a bubble sort     
	If Not IsArray(in_array) Then
		'Print "Sort List: value received is not an array"
		Exit Sub
	End If
	
	Dim top, bot, cur, cur2 As Integer
	top=UBound (in_array)
	bot=LBound (in_array)
	
	If top=bot Then
		'Print "Sort List:: value received contains only one value"
		Exit Sub
	End If
	
	Dim tmp_element As Variant
	
	For cur=bot To top
		cur2=cur
		Do While cur2 > bot     'bubble up
			If (in_array(cur2) > in_array(cur2-1)) Then
				Exit Do
			Else
				'swap
				tmp_element=in_array(cur2)
				in_array(cur2)=in_array(cur2-1)
				in_array(cur2-1)=tmp_element
			End If               
			cur2=cur2-1
		Loop
	Next
	
	Exit Sub
	
Error_Handler:
	' An error has occurred.
	Call Output_Error("ClassUserActivity Script Library - Sort_Array", Erl, True)
	Exit Sub
End Sub

'++LotusScript Development Environment:2:1:ConvertTIMEtoText:1:8
Function ConvertTIMEtoText(TIMESTRUCT As TIMEDATE) As String
	Dim Session As New NotesSession
	Dim spTime As String * MAXALPHATIMEDATE
	Dim retLength As Integer
	Dim StatusResult As Integer
	
	' Error Handler
	On Error Goto Error_Handler
	
	spTime = Space(MAXALPHATIMEDATE)
	StatusResult = W32_ConvertTIMEDATEToText (&h0,&h0, TIMESTRUCT, spTime,MAXALPHATIMEDATE,retLength)
	If StatusResult <> STATUS_SUCCESS Then
		' Conversion failed
		Call Output_Status_Error(StatusResult, "ClassUserActivity - ConvertTIMEToText", "Call to ConvertTIMEDATEToText failed", Getthreadinfo(LSI_THREAD_LINE)-3)
	Else
		ConvertTIMEtoText = Left(spTime,retLength)
	End If
	
	Exit Function
	
Error_Handler:
	Call Output_Error("ClassUserActivity Script Library - ConvertTIMEToText", Erl, True)
	Exit Function	
End Function

'++LotusScript Development Environment:2:1:CreateActivityLogDocs:1:8
Function CreateActivityLogDocs(db As NotesDatabase, ua As NotesUserActivity, RemoveOldLogs As Boolean) As Boolean
	' Create the activity log documents for each entry
	Dim ActivityLogsExtendedView As NotesView
	Dim DocCollection As NotesDocumentCollection
	Dim ActivityLogDoc As NotesDocument
	Dim NextActivityLogDoc As NotesDocument
	Dim ServerName As NotesName
	Dim uae As NotesUserActivityEntry
	Dim uaeExtended As NotesUserActivityEntryExtended
	Dim DateTimeValue As NotesDateTime
	
	Dim ActivityLogList List As String
	Dim iCounter As Integer
	Dim IsExtended As Boolean
	Dim LookupKey As String
	
	' Error Handler
	On Error GoTo Error_Handler
	
	If ActivityLogsView Is Nothing Then
		Set ActivityLogsView = CurrDb.GetView("(ActivityLogs)")
	End If
	
	' Get the list of existing user activity logs and cache them
	If Not ActivityLogsView Is Nothing Then
		Call ActivityLogsView.Refresh
		Set ServerName = New NotesName(db.Server)
		Set DocCollection = ActivityLogsView.GetAllDocumentsByKey(ServerName.Abbreviated & "~" & db.ReplicaID, True)
		If DocCollection.Count > 0 Then
			'Call DocCollection.RemoveAll(True)
			Set ActivityLogDoc = DocCollection.GetFirstDocument
			While Not ActivityLogDoc Is Nothing
				Set NextActivityLogDoc = DocCollection.GetNextDocument(ActivityLogDoc)
				
				' Build the list lookup key
				Set DateTimeValue = New NotesDateTime(ActivityLogDoc.DateTime(0))
				LookupKey = UCase(ActivityLogDoc.UserName(0) & "~" & CStr(DateTimeValue.LSLocalTime))
				If InStr(1, LookupKey, "/") > 0 Then
					LookupKey = Replace(LookupKey, "/", "-")
				End If
				If InStr(1, LookupKey, ":") > 0 Then
					LookupKey = Replace(LookupKey, ":", "-")
				End If
				
				If Trim(CStr(ActivityLogDoc.Reads(0))) <> "" Then
					LookupKey = LookupKey & "~" & Trim(CStr(ActivityLogDoc.Reads(0)))
				Else
					LookupKey = LookupKey & "~0"
				End If
				
				If Trim(CStr(ActivityLogDoc.Writes(0))) <> "" Then
					LookupKey = LookupKey & "~" & Trim(CStr(ActivityLogDoc.Writes(0)))
				Else
					LookupKey = LookupKey & "~0"
				End If
				
				ActivityLogList(LookupKey) = ActivityLogDoc.UniversalID

				Set ActivityLogDoc = NextActivityLogDoc
			Wend
		End If
	End If

	If ua.IsExtended Then
		IsExtended = True
	End If
	
	For iCounter = 1 To ua.UserActivityCount
		If IsExtended Then
			Set uaeExtended = ua.GetNthUserActivityEntryExtended(iCounter)
			If Not uaeExtended Is Nothing Then
				Set DateTimeValue = Nothing
				If Trim(uaeExtended.Time) <> "" Then
					' Convert the Time string value to a proper date / time value
					If IsDate(uaeExtended.Time) Then
						Set DateTimeValue = New NotesDateTime(uaeExtended.Time)
					End If
				End If
				
				' Check if this log entry already exists
				LookupKey = uaeExtended.UserName & "~"
				If DateTimeValue Is Nothing Then
					LookupKey = LookupKey & CStr(uaeExtended.Time)
				Else
					LookupKey = LookupKey & CStr(DateTimeValue.LSLocalTime)
				End If
				
				If InStr(1, LookupKey, "/") > 0 Then
					LookupKey = Replace(LookupKey, "/", "-")
				End If
				If InStr(1, LookupKey, ":") > 0 Then
					LookupKey = Replace(LookupKey, ":", "-")
				End If
				
				LookupKey = LookupKey & "~" & Trim(CStr(GetLongValue(uaeExtended.Reads)))
				LookupKey = LookupKey & "~" & Trim(CStr(GetLongValue(uaeExtended.Adds) + GetLongValue(uaeExtended.Updates) + GetLongValue(uaeExtended.Deletes)))
				
				If IsElement(ActivityLogList(UCase(LookupKey))) Then
					' Existing user activity log was found
					Erase ActivityLogList(UCase(LookupKey))
					Delete uaeExtended
					GoTo Next_Entry
				End If

				Set ActivityLogDoc = New NotesDocument(CurrDb)
				ActivityLogDoc.Form = "ActivityLog"
				ActivityLogDoc.DbServer = db.Server
				ActivityLogDoc.DbReplicaID = db.ReplicaID
				ActivityLogDoc.DbPath = db.FilePath
				ActivityLogDoc.DbTitle = db.Title
				
				If DateTimeValue Is Nothing Then
					ActivityLogDoc.DateTime = uaeExtended.Time
				Else
					Call ActivityLogDoc.ReplaceItemValue("DateTime", DateTimeValue)
				End If
				
				ActivityLogDoc.Reads = GetLongValue(uaeExtended.Reads)
				ActivityLogDoc.Adds = GetLongValue(uaeExtended.Adds)
				ActivityLogDoc.Updates = GetLongValue(uaeExtended.Updates)
				ActivityLogDoc.Deletes = GetLongValue(uaeExtended.Deletes)
				ActivityLogDoc.Writes = ActivityLogDoc.Adds(0) + ActivityLogDoc.Updates(0) + ActivityLogDoc.Deletes(0)
				ActivityLogDoc.NonDataReads = GetLongValue(uaeExtended.NonDataReads)
				ActivityLogDoc.NonDataAdds = GetLongValue(uaeExtended.NonDataAdds)
				ActivityLogDoc.NonDataUpdates = GetLongValue(uaeExtended.NonDataUpdates)
				ActivityLogDoc.NonDataDeletes = GetLongValue(uaeExtended.NonDataDeletes)
				ActivityLogDoc.UserName = uaeExtended.UserName
				Call ActivityLogDoc.Save(True, True)
				
				' Free up the memory occupied by the NotesUserActivity object
				Delete uaeExtended
			End If
		Else
			Set uae = ua.GetNthUserActivityEntry(iCounter)
			If Not uae Is Nothing Then
				Set DateTimeValue = Nothing
				If Trim(uae.Time) <> "" Then
					' Convert the Time string value to a proper date / time value
					If IsDate(uae.Time) Then
						Set DateTimeValue = New NotesDateTime(uae.Time)
					End If
				End If
				
				' Check if this log entry already exists
				LookupKey = uae.UserName & "~"
				If DateTimeValue Is Nothing Then
					LookupKey = LookupKey & CStr(uae.Time)
				Else
					LookupKey = LookupKey & CStr(DateTimeValue.LSLocalTime)
				End If
				
				If InStr(1, LookupKey, "/") > 0 Then
					LookupKey = Replace(LookupKey, "/", "-")
				End If
				If InStr(1, LookupKey, ":") > 0 Then
					LookupKey = Replace(LookupKey, ":", "-")
				End If
				
				LookupKey = LookupKey & "~" & Trim(CStr(GetLongValue(uae.Reads)))
				LookupKey = LookupKey & "~" & Trim(CStr(GetLongValue(uae.Writes)))
				
				If IsElement(ActivityLogList(UCase(LookupKey))) Then
					' Existing user activity log was found
					Erase ActivityLogList(UCase(LookupKey))
					Delete uae
					GoTo Next_Entry
				End If

				Set ActivityLogDoc = New NotesDocument(CurrDb)
				ActivityLogDoc.Form = "ActivityLog"
				ActivityLogDoc.DbServer = db.Server
				ActivityLogDoc.DbReplicaID = db.ReplicaID
				ActivityLogDoc.DbPath = db.FilePath
				ActivityLogDoc.DbTitle = db.Title
				
				If DateTimeValue Is Nothing Then
					ActivityLogDoc.DateTime = uae.Time
				Else
					Call ActivityLogDoc.ReplaceItemValue("DateTime", DateTimeValue)
				End If

				ActivityLogDoc.Reads = GetLongValue(uae.Reads)
				ActivityLogDoc.Writes = GetLongValue(uae.Writes)
				ActivityLogDoc.UserName = uae.UserName
				Call ActivityLogDoc.Save(True, True)
				
				' Free up the memory occupied by the NotesUserActivity object
				Delete uae
			End If
			
			'If iCounter Mod 10 = 0 Then
			'	' Update status bar every 10 records
			'	If Not Session.IsOnServer Then
			'		Print "(" + CStr(iCounter) + ") " + uae.Time + " " + uae.UserName + " " + "Reads:" + CStr(uae.Reads) + " Writes:" + CStr(uae.Writes)
			'	End If
			'End If
		End If

		'If iCounter Mod 10 = 0 Then
		'	' Update status bar every 10 records
		'	If Not Session.IsOnServer Then
		'		Print "(" + CStr(iCounter) + ") " + uae.Time + " " + uae.UserName + " " + "Reads:" + CStr(uae.Reads) + " Writes:" + CStr(uae.Writes)
		'	End If
		'End If

Next_Entry:
	Next iCounter
	
	If RemoveOldLogs Then
		' Remove any user activity logs that weren't found
		On Error Resume Next
		ForAll v_Log In ActivityLogList
			Set ActivityLogDoc = Nothing
			Set ActivityLogDoc = CurrDb.GetDocumentByUNID(v_Log)
			If Not ActivityLogDoc Is Nothing Then
				Call ActivityLogDoc.Remove(True)
			End If
		End ForAll
		On Error GoTo Error_Handler
	End If
	
	Erase ActivityLogList
	
	' Refresh views
	If Not ActivityLogsView Is Nothing Then
		Call ActivityLogsView.Refresh
	End If
	
	Set ActivityLogsExtendedView = CurrDb.GetView("(ActivityLogsExtended)")
	If Not ActivityLogsExtendedView Is Nothing Then
		Call ActivityLogsExtendedView.Refresh
	End If
	
	Exit Function
	
Error_Handler:
	Call Output_Error("ClassUserActivity Script Library - CreateActivityLogDocs", Erl, True)
	Exit Function
End Function

'++LotusScript Development Environment:2:1:MaskedErrorStatus:1:8
Function MaskedErrorStatus(StatusError As Integer) As Integer
	' Error Handler
	On Error Goto Error_Handler
	
	MaskedErrorStatus = StatusError And &H3FFF
	Exit Function
	
Error_Handler:
	Call Output_Error("ClassUserActivity Script Library - MaskedErrorStatus", Erl, True)
	Exit Function
End Function











'++LotusScript Development Environment:2:1:GetLongValue:1:8
Function GetLongValue(inValue As Integer) As Long
	
	' Error Handler
	On Error GoTo Error_Handler
	
	If InValue < 0 Then
		' Convert negative integer to positive long (by adding 2^16)
		GetLongValue = CLng(inValue + 65536)
	Else
		GetLongValue = CLng(inValue)
	End If
	
	Exit Function
	
Error_Handler:
	Call Output_Error("ClassUserActivity Script Library - GetLongValue", Erl, True)
	Exit Function
End Function




















'++LotusScript Development Environment:2:1:Output_Status_Error:1:8
Function Output_Status_Error(StatusError As Integer, FunctionName As Variant, Description As String, LineNumber As Variant) As Boolean
	Dim MaskedStatusError As Integer
	
	' Error Handler
	On Error Goto Error_Handler
	
	If StatusError = 0 Then
		' This is a null status code
		Exit Function
	End If
	
	MaskedStatusError = MaskedErrorStatus(StatusError)
	If MaskedStatusError = 0 Then
		' This is a null error code
		Exit Function
	End If
	
	' Errors that we will ignore
	If MaskedStatusError = ERR_NO_MODIFIED_NOTES Then
		Exit Function
	Elseif MaskedStatusError = ERR_SPECIAL_ID Then
		Exit Function
	Elseif MaskedStatusError = ERR_NOT_FOUND Then
		Exit Function
	End If
	
	Call Output_API_Error(Cstr(FunctionName), Description, Cint(LineNumber), MaskedStatusError)
	
	Output_Status_Error = True
	Exit Function
	
Error_Handler:
	Call Output_Error("ClassUserActivity Script Library - Output_Status_Error", Erl, True)
	Exit Function
End Function

'++LotusScript Development Environment:2:1:CreateDbUserActivityDoc:1:8
Function CreateDbUserActivityDoc(Db As NotesDatabase, ua As NotesUserActivity) As NotesDocument
	' Create the user activity summary document for the database
	Dim ActivityDoc As NotesDocument
	Dim ServerName As NotesName
	Dim DateTimeValue As NotesDateTime
	
	' Error Handler
	On Error GoTo Error_Handler
	
	Set ServerName = New NotesName(Db.Server)
	
	' Open the activity summaries view
	If ActivitySummaryView Is Nothing Then
		Set ActivitySummaryView = CurrDb.GetView("(ActivitySummaries)")
	End If

	' Check for an existing database user activity document	
	If Not ActivitySummaryView Is Nothing Then
		Call ActivitySummaryView.Refresh
		Set ActivityDoc = ActivitySummaryView.GetDocumentByKey(ServerName.Abbreviated & "~" & Db.ReplicaID, True)
	End If
	
	If ActivityDoc Is Nothing Then
		' Existing document not found. Create a new summary document
		Set ActivityDoc = New NotesDocument(CurrDb)
		ActivityDoc.Form = "DbUserActivity"
	End If
	
	If Not ua Is Nothing Then
		If ua.IsExtended Then
			ActivityDoc.IsExtended = "Y"
		Else
			ActivityDoc.IsExtended = "N"
		End If
	Else
		ActivityDoc.IsExtended = "Y"
	End if
	
	ActivityDoc.DbServer = Db.Server
	ActivityDoc.DbTitle = Db.Title
	ActivityDoc.DbPath = Db.FilePath
	ActivityDoc.DbReplicaID = Db.ReplicaID
	
	If Not ua Is Nothing Then
		' Previous Day Activity
		ActivityDoc.R1C1 = ua.PrevDayUses
		ActivityDoc.R1C2 = ua.PrevDayReads
		ActivityDoc.R1C3 = ua.PrevDayWrites
		If ua.IsExtended Then
			ActivityDoc.R1C4 = ua.PrevDayAdds
			ActivityDoc.R1C5 = ua.PrevDayUpdates
			ActivityDoc.R1C6 = ua.PrevDayDeletes
		End If
		
		' Previous Week Activity
		ActivityDoc.R2C1 = ua.PrevWeekUses
		ActivityDoc.R2C2 = ua.PrevWeekReads
		ActivityDoc.R2C3 = ua.PrevWeekWrites
		If ua.IsExtended Then
			ActivityDoc.R2C4 = ua.PrevWeekAdds
			ActivityDoc.R2C5 = ua.PrevWeekUpdates
			ActivityDoc.R2C6 = ua.PrevWeekDeletes
		End If
		
		' Previous Month Activity
		ActivityDoc.R3C1 = ua.PrevMonthUses
		ActivityDoc.R3C2 = ua.PrevMonthReads
		ActivityDoc.R3C3 = ua.PrevMonthWrites
		If ua.IsExtended Then
			ActivityDoc.R3C4 = ua.PrevMonthAdds
			ActivityDoc.R3C5 = ua.PrevMonthUpdates
			ActivityDoc.R3C6 = ua.PrevMonthDeletes
		End If
		
		' Summary Information
		ActivityDoc.Uses = ua.Uses
		ActivityDoc.Reads = ua.Reads
		ActivityDoc.Writes = ua.Writes
		If ua.IsExtended Then
			ActivityDoc.Adds = ua.Adds
			ActivityDoc.Updates = ua.Updates
			ActivityDoc.Deletes = ua.Deletes
		End If
		
		ActivityDoc.NoEntries = ua.UserActivityCount
		
		ActivityDoc.FirstEntry = ua.First	
		If Trim(ua.First) <> "" Then
			' Convert First string value to a date / time value
			If IsDate(ua.First) Then
				Set DateTimeValue = New NotesDateTime(ua.First)
				Call ActivityDoc.ReplaceItemValue("FirstEntry", DateTimeValue)
			End If
		End If
		
		ActivityDoc.LastEntry = ua.Last
		If Trim(ua.Last) <> "" Then
			' Convert Last string value to a date / time value
			If IsDate(ua.Last) Then
				Set DateTimeValue = New NotesDateTime(ua.Last)
				Call ActivityDoc.ReplaceItemValue("LastEntry", DateTimeValue)
			End If
		End If
		
		
		'Print "First: " + ua.First
		'Print "Last: " + ua.Last
		'Print "Uses: " + Cstr(ua.Uses)
		'Print "Uses Day: " + Cstr(ua.PrevDayUses)
		'Print "Uses Week: " + Cstr(ua.PrevWeekUses)
		'Print "Uses Month: " + Cstr(ua.PrevMonthUses)
	End If
	
	Call ActivityDoc.Save(True, True)
	
	Set CreateDbUserActivityDoc = ActivityDoc
	Exit Function

Error_Handler:
	Call Output_Error("ClassUserActivity Script Library - CreateDbUserActivityDoc", Erl, True)
	Exit Function
End Function

'++LotusScript Development Environment:2:2:Output_API_Error:1:8
Sub Output_API_Error(FunctionName As String, Description As String, ErrorLine As Integer, APIErrorCode As Integer)
	' Output the the description for the passed API error code
	Dim ThisSession As New NotesSession
	Dim ErrorDescr As String
	Dim ErrorString As String
	Dim NewLine As String
	
	If APIErrorCode = 0 Then
		' Invalid error code
		Exit Sub
	End If
	
	If ThisSession.Platform = "Windows/32" Then
		ErrorDescr = String$(1024, " ")
		Call W32_OSLoadString(0, APIErrorCode And &H3FFF, ErrorDescr, 1024)
		If Instr(1, ErrorDescr, Chr$(0)) > 0 Then
			ErrorDescr = Strleft(ErrorDescr, Chr$(0))
		End If
		If Trim(ErrorDescr) = "" Or ErrorDescr = "No error" Then
			ErrorDescr = "Unknown error (&H" & Hex$(Cint(APIErrorCode)) & ")"
		End If
	Else
		ErrorDescr = "Unknown error (&H" & Hex$(Cint(APIErrorCode)) & ")"
	End If
	
	If Trim(Description) <> "" Then
		ErrorDescr = Description & ": " & ErrorDescr
	End If
	
	ErrorDescription = ErrorDescr
	Call Output_ErrorLog(FunctionName, ErrorLine)
	
	If ThisSession.IsOnServer Then
		' Session is running on server (scheduled / background agent). Print the error then continue processing
		' Format the error for printing
		NewLine = ", "
		ErrorString = "The following API error has occurred: "
		ErrorString = ErrorString & "Function - " & FunctionName & NewLine
		ErrorString = ErrorString & "Line - " & Trim(Cstr(ErrorLine)) & NewLine
		ErrorString = ErrorString & "Error - " & Trim(Cstr(APIErrorCode)) & NewLine
		ErrorString = ErrorString & "Details - " & ErrorDescr
		Print ErrorString
	Else
		NewLine = Chr(13)
		ErrorString = "The following API error has occurred:" & NewLine
		ErrorString = ErrorString & "Function - " & FunctionName & NewLine
		ErrorString = ErrorString & "Line - " & Trim(Cstr(ErrorLine)) & NewLine
		ErrorString = ErrorString & "Error - " & Trim(Cstr(APIErrorCode)) & NewLine
		ErrorString = ErrorString & "Details - " & ErrorDescr & NewLine & NewLine
		ErrorString = ErrorString & "Would you like to continue processing?"
		
		If Messagebox(ErrorString, MB_YESNO + MB_ICONSTOP, "Processing Error") = IDNO Then
			' The no button was clicked
			End
		End If
	End If
End Sub

'++LotusScript Development Environment:2:1:Output_ErrorLog:1:8
Function Output_ErrorLog(FunctionName As String, ErrorLine As Integer) As NotesDocument
	' Create an error log document for the passed error
	Dim ThisSession As New NotesSession
	Dim ThisDb As NotesDatabase
	Dim ErrorLogDoc As NotesDocument
	Dim DatabaseLinkItem As NotesRichTextItem
	Dim DocumentLinkItem As NotesRichTextItem
	Dim DocTitle As String
	Dim ErrorString As String
	Dim IgnoreError As Boolean
	Dim PlatformSpecific As String
	Dim TempVar As Variant
	
	' Error handler
	On Error Resume Next
	
	' Exit function if ErrorLine is 0
	If ErrorLine = 0 Then
		' Not a valid error
		Exit Function
	End If

	' Check for errors to ignore
	If ErrorDescription = "" Then
		ErrorString = LCase(Error$)
	Else
		ErrorString = LCase(ErrorDescription)
	End If

	If InStr(1, ErrorString, "stopped at your request") > 0 Then
		IgnoreError = True
	ElseIf InStr(1, ErrorString, "server not responding") > 0 Then
		IgnoreError = True
	ElseIf InStr(1, ErrorString, "server is not responding") > 0 Then
		IgnoreError = True
	End If
	
	If IgnoreError Then
		Exit Function
	End If

	Set ThisDb = ThisSession.CurrentDatabase
	
	' Create a new error log document for this error
	Set ErrorLogDoc = New NotesDocument(ThisDb)
	ErrorLogDoc.Form = "ErrorLog"
	ErrorLogDoc.CreatedAt = Now
	
	If InStr(1, FunctionName, "-") = 0 Then
		ErrorLogDoc.DesignElement = Trim(FunctionName)
		ErrorLogDoc.Function = Trim(FunctionName)
	Else
		ErrorLogDoc.DesignElement = Trim(StrLeftBack(FunctionName, "-"))
		ErrorLogDoc.Function = Trim(StrRightBack(FunctionName, "-"))
	End If
	
	ErrorLogDoc.LineNumber = ErrorLine
	ErrorLogDoc.ErrorNumber = Err
	
	If ErrorDescription = "" Then
		ErrorLogDoc.Error = Error$
	Else
		If Len(ErrorDescription) > 20000 Then
			ErrorDescription = Left(ErrorDescription, 1000) & "...<truncated>..." & Right(ErrorDescription, 1000)
		End If
		ErrorLogDoc.Error = ErrorDescription
	End If
	
	ErrorLogDoc.UserName = ThisSession.UserName
	ErrorLogDoc.NotesVersion = ThisSession.NotesVersion
	
	TempVar = Evaluate(|@Platform([SPECIFIC])|)
	If IsArray(TempVar) Then
		PlatformSpecific = Join(TempVar, ";")
	End If
	
	If Trim(PlatformSpecific) = "" Then
		ErrorLogDoc.Platform = ThisSession.Platform
	Else
		ErrorLogDoc.Platform = ThisSession.Platform & " (" & PlatformSpecific & ")"
	End If
	
	If ThisDb.Server = "" Then
		ErrorLogDoc.SourceServer = LOCAL_SERVER
	Else
		ErrorLogDoc.SourceServer = ThisDb.Server
	End If
	ErrorLogDoc.SourceDb = ThisDb.Title & " (" & LCase(ThisDb.FilePath) & ")"
	ErrorLogDoc.SourceDbPath = LCase(ThisDb.FilePath)
	
	Call ErrorLogDoc.Save(True, True)
	
	' Return the error log document
	Set Output_ErrorLog = ErrorLogDoc
	
End Function







