'++LotusScript Development Environment:2:5:(Options):0:74
'********************************************
'Library RecalculationAccess
'Olimpus: Jan 26, 2021
'********************************************
Option Public
Option Declare

Use "A1_Setup"
Use "PhoneDirectory"
Use "ContractLibInterface"
Use "Vendor"

'++LotusScript Development Environment:2:5:(Forward):0:1
Declare Private Class AccessListAgreement
Declare Private Class PersonInfo
Declare Private Class DepartmentInfo
Declare Private Class AccessListCompany
Declare Sub Initialize
Declare Private Function GetTrueName(nm As String) As String
Declare Private Sub SetPersonInfo(nm As String)
Declare Private Sub setPerson(agrDoc As NotesDocument, person As NotesDocument, ArrayVar As String)
Declare Private Sub DomenRecalc(nm As Variant, oldDomen As String)
Declare Function RAA_recalculateAccessToMany (dc As NotesDocumentCollection, persons As Variant) As Boolean
Declare Function RAA_recalculateAccess (doc As NotesDocument, persons As Variant) As Boolean

'++LotusScript Development Environment:2:5:(Declarations):0:10

Private nLine As String
Private Const designElem = {RecalculationAccess}

Const newDomen = {OTTO}

Private Company List As AccessListCompany
Private Department List As DepartmentInfo
Private Person List As PersonInfo

Private Class AccessListAgreement
	Public docAgreement As NotesDocument
	Public ClassName As String
	Public CreatorLN As Variant
	Public CreatorRus As Variant
	Public HeadLN As Variant
	Public HeadRUS As Variant
	Public HeadTitle As Variant
	Public AccEditListLN As Variant
	Public AccEditListRus As Variant
	Public AccessListLN As Variant
	Public AccessListRus As Variant
	Public DepartUNIDs As Variant
	Public DepartNames As Variant
	Public VendorUNID As Variant
	Public Vendors As Variant
	Public CompanyRoles As Variant
	Public Resident As String
	Public isMedia As String
	Public Scala As Boolean
	Public Daiz As String
	Public CondPay As String
	Public Cond_Pay As String
	Public CondPay_bkp As String
	Public Cond_Pay_bkp As String
	
	Public Sub New
		ClassName = {AccessListAgreement}
	End Sub
	
	Public Sub Initialize(doc As NotesDocument)
		Set docAgreement = doc
		CreatorLN = doc.Getitemvalue("CreatorLN")(0)
		CreatorRus = doc.Getitemvalue("CreatorRus")(0)
		HeadLN = doc.Getitemvalue("HeadLN")
		HeadRUS = doc.Getitemvalue("HeadRUS")
		HeadTitle = doc.Getitemvalue("HeadTitle")
		AccEditListLN = doc.Getitemvalue("AccEditListLN")
		AccEditListRus = doc.Getitemvalue("AccEditListRus")
		AccessListLN = doc.Getitemvalue("AccessListLN")
		AccessListRus = doc.Getitemvalue("AccessListRus")
		DepartUNIDs = doc.Getitemvalue("DepartUNIDs")
		DepartNames = doc.Getitemvalue("DepartNames")
		VendorUNID = doc.Getitemvalue("VendorUNID")
		Vendors = doc.Getitemvalue("Vendors")
		CompanyRoles = doc.Getitemvalue("CompanyRoles")
		Resident = doc.Getitemvalue("Resident")(0)
		isMedia = doc.Getitemvalue("isMedia")(0)
		If Len(FullTrim(doc.Getitemvalue("Scala")(0))) > 0 Then
			Scala = True
		Else
			Scala = False
		End If
		Daiz = doc.Getitemvalue("Daiz")(0)
		CondPay = doc.Getitemvalue("CondPay")(0)
		Cond_Pay = doc.Getitemvalue("Cond_Pay")(0)
		CondPay_bkp = doc.Getitemvalue("CondPay_bkp")(0)
		Cond_Pay_bkp = doc.Getitemvalue("Cond_Pay_bkp")(0)
	End Sub
	
	Public Sub InitializeFull(doc As NotesDocument)
		On Error GoTo eh
		Dim errS As String
		Dim docF As NotesDocument
		Dim n As Long
		Dim i As Long
		Dim nm As String
		Dim CondPayException(2) As String
		
		Set docAgreement = doc
		CreatorLN = doc.Getitemvalue("CreatorLN")(0)
		CreatorLN = GetTrueName(CStr(CreatorLN))
		If CreatorLN <> "" Then
			Call SetPersonInfo(CStr(CreatorLN))
			CreatorRus = Person(CreatorLN).Caller
		End If
		HeadLN = doc.Getitemvalue("HeadLN")
		ForAll hLn In HeadLN
			hLn = GetTrueName(CStr(hLn))
			If hLn <> "" Then Call SetPersonInfo(CStr(hLn))
		End ForAll
		AccEditListLN = doc.Getitemvalue("AccEditListLN")
		AccEditListLN = FullTrim(ArrayUnique(AccEditListLN))
		ForAll aelLn In AccEditListLN
			aelLn = GetTrueName(CStr(aelLn))
			If aelLn <> "" Then Call SetPersonInfo(CStr(aelLn))
		End ForAll
		AccessListLN = doc.Getitemvalue("AccessListLN")
		AccessListLN = FullTrim(ArrayUnique(AccessListLN))
		ForAll alLn In AccessListLN
			alLn = GetTrueName(CStr(alLn))
			If alLn <> "" Then Call SetPersonInfo(CStr(alLn))
		End ForAll
		DepartUNIDs = doc.Getitemvalue("DepartUNIDs")
		VendorUNID = doc.Getitemvalue("VendorUNID")
		Vendors = doc.Getitemvalue("Vendors")
		If UBound(Vendors) <> UBound(VendorUNID) Then ReDim Preserve Vendors(UBound(VendorUNID))
		
		If Len(FullTrim(doc.Getitemvalue("Scala")(0))) > 0 Then
			Scala = True
			Daiz = "[Daiz]"
		Else
			Scala = False
			Daiz = ""
		End If
		CondPayException(0) = {Оплата денежными средствами}
		CondPayException(1) = {Оплата по факту (денежными средствами)}
		CondPayException(2) = {Предоплата (денежными средствами)}
		CondPay = doc.Getitemvalue("CondPay")(0)
		Cond_Pay = doc.Getitemvalue("Cond_Pay")(0)
		ForAll Exception In CondPayException()
			If InStr(CondPay, Exception) Then
				CondPay = ""
				Cond_Pay = ""
				CondPay_bkp = CondPay
				Cond_Pay_bkp = Cond_Pay
				Exit ForAll
			End If
		End ForAll
		
		If CreatorLN <> "" Then
			nm = GetTrueName(CStr(Person(CreatorLN).StructureHeaderAddress))'Переопределение nm
			If nm <> "" Then Call SetPersonInfo(nm)
			If IsNull(ArrayGetIndex(HeadLN, nm)) Then HeadLN = ArrayAppend(HeadLN, nm)
		End If
		
		For n = 0 To UBound(DepartUNIDs)
			If Len(DepartUNIDs(n)) = 32 Then
				nm = DepartUNIDs(n)'Переопределение nm
				Set Department(nm) = New DepartmentInfo
				Set docF = Nothing
				On Error Resume Next
				Set docF = PD_GetFirmByUNID(CStr(nm))
				On Error GoTo eh
				If Not docF Is Nothing Then Call Department(nm).Initialize(docF)
				If InStr(Department(nm).HeaderAddress, "/") > 0 Then
					If IsNull(ArrayGetIndex(HeadLN, Department(nm).HeaderAddress)) Then
						HeadLN = ArrayAppend(HeadLN, Department(nm).HeaderAddress)
					End If
				End If
				If IsArray(Department(nm).PersonsList) Then
					If Department(nm).PersonsList(0) <> "" Then
						For i = 0 To UBound(Department(nm).PersonsList)
							If InStr(Department(nm).PersonsList(i), "/") > 0 Then
								If IsNull(ArrayGetIndex(AccEditListLN, Department(nm).PersonsList(i))) Then
									AccEditListLN = ArrayAppend(AccEditListLN, Department(nm).PersonsList(i))
								End If
							End If 
						Next
					End If
				End If
			Else
				DepartUNIDs(n) = ""
			End If
		Next
		DepartUNIDs = FullTrim(DepartUNIDs)
		
		For n = 0 To UBound(VendorUNID)
			If Len(VendorUNID(n)) = 32 Then
				nm = VendorUNID(n)'Переопределение nm
				If Not IsElement(Company(nm)) Then
					Set Company(nm) = New AccessListCompany
					Set docF = Nothing
					On Error Resume Next
					Set docF = VD_GetVendorByUNID(nm)
					On Error GoTo eh
					If docF Is Nothing Then
						Company(nm).CompanyName = Vendors(n)
					Else
						Call Company(nm).Initialize(docF)
					End If 
				End If
				If Company(nm).Resident = "0" Then
					Resident = "0"
				Else
					If Company(nm).Resident = "1" And Resident <> "0" Then
						Resident = "1"
					End If
				End If
				If Company(nm).isMedia = "1" Then isMedia = "1"
				If IsArray(CompanyRoles) Then
					ReDim Preserve CompanyRoles(UBound(CompanyRoles) + 1)
				Else
					ReDim CompanyRoles(0)
				End If
				CompanyRoles(UBound(CompanyRoles)) = Company(nm).SystemRole
				If IsArray(Company(nm).ChaccountLN) Then
					For i = 0 To UBound(Company(nm).ChaccountLN)
						If InStr(Company(nm).ChaccountLN(i), "/") > 0 Then
							If IsNull(ArrayGetIndex(AccessListLN, Company(nm).ChaccountLN(i))) Then
								AccessListLN = ArrayAppend(AccessListLN, Company(nm).ChaccountLN(i))
							End If
						End If 
					Next
				End If
				If IsArray(Company(nm).GenChaccountLN) Then
					For i = 0 To UBound(Company(nm).GenChaccountLN)
						If InStr(Company(nm).GenChaccountLN(i), "/") > 0 Then
							If IsNull(ArrayGetIndex(AccessListLN, Company(nm).GenChaccountLN(i))) Then
								AccessListLN = ArrayAppend(AccessListLN, Company(nm).GenChaccountLN(i))
							End If
						End If 
					Next
				End If
				If IsArray(Company(nm).TreasurerLN) Then
					For i = 0 To UBound(Company(nm).TreasurerLN)
						If InStr(Company(nm).TreasurerLN(i), "/") > 0 Then
							If IsNull(ArrayGetIndex(AccessListLN, Company(nm).TreasurerLN(i))) Then
								AccessListLN = ArrayAppend(AccessListLN, Company(nm).TreasurerLN(i))
							End If
						End If 
					Next
				End If
			End If
		Next
		HeadLN = FullTrim(ArrayUnique(HeadLN))
		AccEditListLN = FullTrim(ArrayUnique(AccEditListLN))
		AccessListLN = FullTrim(ArrayUnique(AccessListLN))
		CompanyRoles = FullTrim(ArrayUnique(CompanyRoles))
		
		ReDim HeadRUS(UBound(HeadLN))
		ReDim HeadTitle(UBound(HeadLN))
		For i = 0 To UBound(HeadLN)
			If HeadLN(i) <> "" Then
				HeadRUS(i) = Person(HeadLN(i)).Caller
				If HeadRUS(i) = "" Then
					HeadLN(i) = ""
				Else
					HeadTitle(i) = Person(HeadLN(i)).StructurePosition
				End If
			End If
		Next
		HeadLN = FullTrim(HeadLN)
		HeadRUS = FullTrim(HeadRUS)
		HeadTitle = FullTrim(HeadTitle)
		
		ReDim AccEditListRus(UBound(AccEditListLN))
		For i = 0 To UBound(AccEditListLN)
			If AccEditListLN(i) <> "" Then
				AccEditListRus(i) = Person(AccEditListLN(i)).Caller
				If AccEditListRus(i) = "" Then AccEditListLN(i) = ""
			End If
		Next
		AccEditListLN = FullTrim(AccEditListLN)
		AccEditListRus = FullTrim(AccEditListRus)
		
		ReDim AccessListRus(UBound(AccessListLN))
		For i = 0 To UBound(AccessListLN)
			If AccessListLN(i) <> "" Then
				AccessListRus(i) = Person(AccessListLN(i)).Caller
				If AccessListRus(i) = "" Then AccessListLN(i) = ""
			End If
		Next
		AccessListLN = FullTrim(AccessListLN)
		AccessListRus = FullTrim(AccessListRus)
		
		ReDim DepartNames(UBound(DepartUNIDs))
		For i = 0 To UBound(DepartUNIDs)
			If Len(DepartUNIDs(i)) = 32 Then
				DepartNames(i) = Department(DepartUNIDs(i)).DepartamentName
				If DepartNames(i) = "" Then DepartNames(i) = "Unknown Department"
			End If
		Next
		
		ReDim Vendors(UBound(VendorUNID))
		For i = 0 To UBound(VendorUNID)
			Vendors(i) = Company(VendorUNID(i)).CompanyName
		Next
		
		GoTo fn
eh:
		errS = Me.ClassName & {.InitializeFull: in line } & Erl & nLine & Error$
		If Not doc Is Nothing Then errS = errS & nLine & {Agreement Unid: } & doc.Universalid
		Error Err, errS
fn:
	End Sub
	
	Public Function Equal(alAgr As AccessListAgreement) As Boolean
		On Error GoTo eh
		Dim errS As String
		Dim i As Integer
		
		Equal = True
		If docAgreement.Universalid <> alAgr.docAgreement.Universalid Then GoTo fn
		If CreatorRus <> alAgr.CreatorRus Then
			If  CreatorRus = "" Then
				CreatorRus = alAgr.CreatorRus
			ElseIf alAgr.CreatorRus = "" Then
				alAgr.CreatorRus = CreatorRus
			End If
		End If
		
		If CreatorLN <> alAgr.CreatorLN Then
			Equal = False
		ElseIf CreatorRus <> alAgr.CreatorRus And CreatorRus <> "" And alAgr.CreatorRus <> "" Then
			Equal = False
		ElseIf UBound(DepartUNIDs) <> UBound(alAgr.DepartUNIDs) Then
			Equal = False
		ElseIf UBound(DepartNames) <> UBound(alAgr.DepartNames) Then
			Equal = False
		ElseIf UBound(HeadLN) <> UBound(alAgr.HeadLN) Then
			Equal = False
		ElseIf UBound(HeadRUS) <> UBound(alAgr.HeadRUS) Then
			Equal = False
		ElseIf UBound(HeadTitle) <> UBound(alAgr.HeadTitle) Then
			Equal = False
		ElseIf UBound(AccEditListLN) <> UBound(alAgr.AccEditListLN) Then
			Equal = False
		ElseIf UBound(AccEditListRus) <> UBound(alAgr.AccEditListRus) Then
			Equal = False
		ElseIf UBound(AccessListLN) <> UBound(alAgr.AccessListLN) Then
			Equal = False
		ElseIf UBound(AccessListRus) <> UBound(alAgr.AccessListRus) Then
			Equal = False
		ElseIf UBound(VendorUNID) <> UBound(alAgr.VendorUNID) Then
			Equal = False
		ElseIf UBound(Vendors) <> UBound(alAgr.Vendors) Then
			Equal = False
		ElseIf UBound(CompanyRoles) <> UBound(alAgr.CompanyRoles) Then
			Equal = False
		ElseIf Resident <> alAgr.Resident Then
			Equal = False
		ElseIf isMedia <> alAgr.isMedia Then
			Equal = False
		ElseIf Scala <> alAgr.Scala Then
			Equal = False
		ElseIf Daiz <> alAgr.Daiz Then
			Equal = False
		ElseIf CondPay <> alAgr.CondPay Then
			Equal = False
		ElseIf Cond_Pay <> alAgr.Cond_Pay Then
			Equal = False
		ElseIf CondPay_bkp <> alAgr.CondPay_bkp Then
			Equal = False
		ElseIf Cond_Pay_bkp <> alAgr.Cond_Pay_bkp Then
			Equal = False
		Else
			For i = 0 To UBound(DepartUNIDs)
				If DepartUNIDs(i) <> alAgr.DepartUNIDs(i) Then
					Equal = False
					GoTo fn
				End If
			Next
			For i = 0 To UBound(DepartNames)
				If DepartNames(i) <> alAgr.DepartNames(i) Then
					Equal = False
					GoTo fn
				End If
			Next
			For i = 0 To UBound(HeadLN)
				If HeadLN(i) <> alAgr.HeadLN(i) Then
					Equal = False
					GoTo fn
				End If
			Next
			For i = 0 To UBound(HeadRUS)
				If HeadRUS(i) <> alAgr.HeadRUS(i) Then
					Equal = False
					GoTo fn
				End If
			Next
			For i = 0 To UBound(HeadTitle)
				If HeadTitle(i) <> alAgr.HeadTitle(i) Then
					Equal = False
					GoTo fn
				End If
			Next
			For i = 0 To UBound(AccEditListLN)
				If AccEditListLN(i) <> alAgr.AccEditListLN(i) Then
					Equal = False
					GoTo fn
				End If
			Next
			For i = 0 To UBound(AccEditListRus)
				If AccEditListRus(i) <> alAgr.AccEditListRus(i) Then
					Equal = False
					GoTo fn
				End If
			Next
			For i = 0 To UBound(AccessListLN)
				If AccessListLN(i) <> alAgr.AccessListLN(i) Then
					Equal = False
					GoTo fn
				End If
			Next
			For i = 0 To UBound(AccessListRus)
				If AccessListRus(i) <> alAgr.AccessListRus(i) Then
					Equal = False
					GoTo fn
				End If
			Next
			For i = 0 To UBound(VendorUNID)
				If VendorUNID(i) <> alAgr.VendorUNID(i) Then
					Equal = False
					GoTo fn
				End If
			Next
			For i = 0 To UBound(Vendors)
				If Vendors(i) <> alAgr.Vendors(i) Then
					Equal = False
					GoTo fn
				End If
			Next
			For i = 0 To UBound(CompanyRoles)
				If CompanyRoles(i) <> alAgr.CompanyRoles(i) Then
					Equal = False
					GoTo fn
				End If
			Next
		End If
		
		GoTo fn
eh:
		errS = Me.ClassName & {.Equal: in line } & Erl & nLine & Error$
		If Not docAgreement Is Nothing Then errS = errS & nLine & {Agreement Unid: } & docAgreement.Universalid
		Error Err, errS
fn:
	End Function
	
	Public Function Save As Boolean
		On Error GoTo eh
		Dim errS As String
		
		docAgreement.Replaceitemvalue("CreatorLN", CreatorLN).Isauthors = True
		If CreatorRus <> "" Then Call docAgreement.Replaceitemvalue("CreatorRus", CreatorRus)
		docAgreement.Replaceitemvalue("HeadLN", HeadLN).Isauthors = True
		Call docAgreement.Replaceitemvalue("HeadRUS", HeadRUS)
		Call docAgreement.Replaceitemvalue("HeadTitle", HeadTitle)
		docAgreement.Replaceitemvalue("AccEditListLN", AccEditListLN).Isauthors = True
		Call docAgreement.Replaceitemvalue("AccEditListRus", AccEditListRus)
		docAgreement.Replaceitemvalue("AccessListLN", AccessListLN).Isreaders = True
		Call docAgreement.Replaceitemvalue("AccessListRus", AccessListRus)
		Call docAgreement.Replaceitemvalue("DepartUNIDs", DepartUNIDs)
		Call docAgreement.Replaceitemvalue("DepartNames", DepartNames)
		Call docAgreement.Replaceitemvalue("VendorUNID", VendorUNID)
		Call docAgreement.Replaceitemvalue("Vendors", Vendors)
		docAgreement.Replaceitemvalue("CompanyRoles", CompanyRoles).Isreaders = True
		Call docAgreement.Replaceitemvalue("Resident", Resident)
		Call docAgreement.Replaceitemvalue("VendorUNID", VendorUNID)
		Call docAgreement.Replaceitemvalue("isMedia", isMedia)
		If Scala Then
			docAgreement.Replaceitemvalue("Daiz", Daiz).Isreaders = True
		Else
			Call docAgreement.Replaceitemvalue("Daiz", Daiz)
		End If
		Call docAgreement.Replaceitemvalue("CondPay", CondPay)
		Call docAgreement.Replaceitemvalue("Cond_Pay", Cond_Pay)
		Call docAgreement.Replaceitemvalue("CondPay_bkp", CondPay_bkp)
		Call docAgreement.Replaceitemvalue("Cond_Pay_bkp", Cond_Pay_bkp)
		
		If docAgreement.Getitemvalue("CanEditAllDocs")(0) = "" Then
			docAgreement.Replaceitemvalue("CanEditAllDocs", "[CanEditAllDocs]").Isauthors = True
		End If
		If docAgreement.Getitemvalue("CanReadAllDocs")(0) = "" Then
			docAgreement.Replaceitemvalue("CanReadAllDocs", "[CanReadAllDocs]").Isreaders = True
		End If
		
		Save = docAgreement.Save(False, docAgreement.Isresponse)
		
		GoTo fn
eh:
		errS = Me.ClassName & {.Save: in line } & Erl & nLine & Error$
		If Not docAgreement Is Nothing Then errS = errS & nLine & {Agreement Unid: } & docAgreement.Universalid
		Error Err, errS
fn:
	End Function
End Class

Private Class PersonInfo
	Public ClassName As String
	Public Caller As Variant
	Public CallerNickname As Variant
	Public NotesAddress As Variant
	Public Unid As Variant
	Public StructureHeaderAddress As Variant
	Public StructurePosition As Variant
	
	Public Sub New
		ClassName = {PersonInfo}
	End Sub
	
	Public Sub Initialize(docPerson As NotesDocument)
		Caller = docPerson.Getitemvalue("Caller")(0)
		CallerNickname = docPerson.Getitemvalue("CallerNickname")(0)
		NotesAddress = docPerson.Getitemvalue("NotesAddress")(0)
		Unid = docPerson.Universalid
		StructureHeaderAddress = docPerson.Getitemvalue("StructureHeaderAddress")(0)
		StructurePosition = docPerson.Getitemvalue("StructurePosition")(0)
	End Sub
End Class

Private Class DepartmentInfo
	Public ClassName As String
	Public DepartamentName As Variant
	Public HeaderAddress As Variant
	Public HeaderPersonUnid As Variant
	Public PersonsList As Variant
	
	Public Sub New
		ClassName = {DepartmentInfo}
	End Sub
	
	Public Sub Initialize(docDepartment As NotesDocument)
		On Error GoTo eh
		Dim errS As String
		Dim arrPosUnid As Variant
		Dim i As Long
		Dim dcPers As NotesDocumentCollection
		Dim docPers As NotesDocument
		Dim nName As NotesName
		Dim nm As Variant
		
		DepartamentName = docDepartment.Getitemvalue("DepartamentName")(0)
		
		HeaderAddress = GetTrueName(docDepartment.Getitemvalue("HeaderAddress")(0))
		If HeaderAddress <> "" Then Call SetPersonInfo(CStr(HeaderAddress))
		HeaderPersonUnid = docDepartment.Getitemvalue("HeaderPersonUnid")(0)
		
		arrPosUnid = PD_GetAllPostionsUNIDByDeptUNID(docDepartment.Universalid)
		If IsArray(arrPosUnid) Then
			If arrPosUnid(LBound(arrPosUnid)) <> "" Then
				ReDim PersonsList(0)
				For i = 0 To LBound(arrPosUnid)
					Set dcPers = PD_GetPersonDcByPositionUNID(arrPosUnid(i))
					Set docPers = dcPers.GetFirstDocument
					Do While Not docPers Is Nothing
						nm = GetTrueName(docPers.Getitemvalue("NotesAddress")(0))
						Call SetPersonInfo(CStr(nm))
						PersonsList = ArrayAppend(PersonsList, nm)
							
nextDocPers:
						Set docPers = dcPers.GetNextDocument(docPers)
					Loop
				Next
				PersonsList = FullTrim(ArrayUnique(PersonsList))
			End If
		End If
		
		GoTo fn
eh:
		errS = Me.ClassName & {.Initialize: in line } & Erl & nLine & Error$
		If Not docDepartment Is Nothing Then errS = errS & nLine & {Department: } & docDepartment.Universalid
		If Not docPers Is Nothing Then Resume nextDocPers
		Error Err, errS
fn:
	End Sub
End Class
Private Class AccessListCompany
	Public ClassName As String
	Public ChaccountLN As Variant
	Public GenChaccountLN As Variant
	Public TreasurerLN As Variant
	Public CompanyName As String
	Public SystemRole As String
	Public Resident As String
	Public isMedia As String
	
	Public Sub New
		ClassName = {AccessListCompany}
	End Sub
	
	Public Sub Initialize(docCompany As NotesDocument)
		On Error GoTo eh
		Dim errS As String
		Dim docF As NotesDocument
		
		If docCompany.Getitemvalue("FirmKey")(0) = "" Then
			CompanyName = docCompany.Getitemvalue("Firm")(0)
		Else
			CompanyName = docCompany.Getitemvalue("FirmKey")(0)
		End If
		If docCompany.Getitemvalue("CanCreateContract")(0) = "1" Or docCompany.Getitemvalue("Internal")(0) = "1" Then
			Set docF = Nothing
			On Error Resume Next
			Set docF = PD_GetFirmDoc(CompanyName)
			On Error GoTo eh
			If Not docF Is Nothing Then
				ChaccountLN = docF.Getitemvalue("ChaccountLN")
				GenChaccountLN = docF.Getitemvalue("GenChaccountLN")
				TreasurerLN = docF.Getitemvalue("TreasurerLN")
				SystemRole = {[} & docF.Getitemvalue("SystemRole")(0) & {]}
			End If
		End If
		Resident = docCompany.Getitemvalue("Resident")(0)
		If InStr(LCase(Implode(docCompany.Getitemvalue("Category_scala"),{~})), {реклама}) Then
			isMedia = "1"
		End If
		
		If IsArray(ChaccountLN) Then
			ForAll nm In ChaccountLN
				nm = GetTrueName(CStr(nm))
				If nm <> "" Then Call SetPersonInfo(CStr(nm))
			End ForAll
		End If
		If IsArray(GenChaccountLN) Then
			ForAll nm In GenChaccountLN
				nm = GetTrueName(CStr(nm))
				If nm <> "" Then Call SetPersonInfo(CStr(nm))
			End ForAll
		End If
		If IsArray(TreasurerLN) Then
			ForAll nm In TreasurerLN
				nm = GetTrueName(CStr(nm))
				If nm <> "" Then Call SetPersonInfo(CStr(nm))
			End ForAll
		End If
		
		GoTo fn
eh:
		errS = Me.ClassName & {.Initialize: in line } & Erl & nLine & Error$
		If Not docCompany Is Nothing Then errS = errS & nLine & {Vendor Unid} & docCompany.Universalid
		If Not docF Is Nothing Then errS = errS & nLine & {Firm Unid} & docF.Universalid
		Error Err, errS
fn:
	End Sub
End Class
'++LotusScript Development Environment:2:2:Initialize:2:10

Sub Initialize
	On Error GoTo ErrH
	nLine = Chr(10) & Chr(13)



	GoTo EndH
ErrH:
	stop
	Error Err, DesignElem & " -> " & GetThreadInfo(1) & ", c. " & CStr(ErL) & nLine & Error$ & nLine & Err
	Resume endH
EndH:
End Sub


'++LotusScript Development Environment:2:1:GetTrueName:1:8
Private Function GetTrueName(nm As String) As String
	On Error GoTo handler
	Const FuncName = {Function "SetPersonInfo"}
	Dim errS As String
	Dim nName As NotesName
	Dim var As Variant
	
	var = nm
	If InStr(var, {/}) > 0 Then
		Call DomenRecalc(var, {QRU})
		Call DomenRecalc(var, {PROMP})
		If InStr(var, {CN=}) = 0 Then
			Set nName = New NotesName(var)
			GetTrueName = nName.Canonical
		Else
			GetTrueName = var
		End If
	Else
		GetTrueName = ""
	End If
	
	GoTo endh
handler:
	errS = FuncName & ": " & Err &", в стр " & Erl & nLine & Error$
	errS = errS & nLine & {Name: } & nm
	Error Err, errS
endh:
End Function




'++LotusScript Development Environment:2:2:SetPersonInfo:1:8
Private Sub SetPersonInfo(nm As String)
	On Error GoTo eh
	Const FuncName = {Sub "SetPersonInfo"}
	Dim errS As String
	Dim docF As NotesDocument
	Dim var As Variant
	
	var = nm
	If Not IsElement(Person(var)) Then
		Set docF = Nothing
		Set Person(var) = New PersonInfo
		On Error Resume Next
		Set docF = PD_GetPersonDocByLN(CStr(var))
		On Error GoTo eh
		
		If Not docF Is Nothing Then
			Call Person(var).Initialize(docF)
			Call DomenRecalc(Person(var).StructureHeaderAddress, {QRU})
			Call DomenRecalc(Person(var).StructureHeaderAddress, {PROMP})
		End If
	End If

	GoTo fn
eh:
	errS = FuncName & ": " & Err &", в стр " & Erl & nLine & Error$
	errS = errS & nLine & {Name: } & nm
	If Not docF Is Nothing Then errS = errS & nLine & {Firm doc Unid: } & docF.Universalid
	Error Err, errS
fn:
End Sub

'++LotusScript Development Environment:2:2:setPerson:5:8
'********************************************
'Sub setPerson
'DCS-Olympiev: Jun 5, 2019
'********************************************
Private Sub setPerson(agrDoc As NotesDocument, person As NotesDocument, ArrayVar As String)
	On Error GoTo ErrH
		
	Dim peopleList As Variant
	Dim peopleRus As Variant
	Dim peopleEng As Variant
	Dim NewpeopleRus As Variant
	Dim NewpeopleEng As Variant
	
	Dim macro As Variant
	Dim i As Long
	
	peopleRus = ArrayInit(agrDoc.GetItemValue(ArrayVar & "Rus"))
	peopleEng = ArrayInit(agrDoc.GetItemValue(ArrayVar & "LN"))
	
	peopleList = ArrayInit("")
	For i=0 To UBound(peopleRus)
		If peopleRus(i) <> "" Then
			peopleList = ArrayAppendElement(peopleList, peopleRus(i) & "~" & peopleEng(i))
		End If
	Next

	NewpeopleRus = ArrayInit("")
	NewpeopleEng = ArrayInit("")
	
	macro = Evaluate({@Name([CANONICALIZE];NotesAddress)},person)
	peopleList = ArrayAppendElement(peopleList, person.GetItemValue("Caller")(0) & "~" & macro(0))
	newPeopleRus = ArrayAppendElement(newPeopleRus,person.GetItemValue("Caller")(0))
	NewpeopleEng = ArrayAppendElement(newPeopleEng,macro(0))
		
	peopleList = FullTrim(ArrayUnique(peopleList))
	'	Call ArraySort(1,peopleList)
	
	Call agrDoc.Replaceitemvalue("New" & ArrayVar & "LN", FullTrim(NewPeopleEng))
	Call agrDoc.Replaceitemvalue("New" & ArrayVar & "Rus", FullTrim(NewPeopleRus))
	
	peopleRus = ArrayInit("")
	peopleEng = ArrayInit("")
	
	ForAll x In peopleList
		peopleRus = ArrayAppendElement(peopleRus, StrLeft(x,"~"))
		peopleEng = ArrayAppendElement(peopleEng, StrRight(x,"~"))
	End ForAll

	Call agrDoc.ReplaceItemValue(ArrayVar & "Rus",FullTrim(peopleRus))
	Call agrDoc.ReplaceItemValue(ArrayVar & "LN",FullTrim(peopleEng))
	
	If agrDoc.Getitemvalue("StatusNumber")(0) <> "200" Then
		Call agrDoc.Replaceitemvalue("New" & ArrayVar & "LN", FullTrim(PeopleEng))
		Call agrDoc.Replaceitemvalue("New" & ArrayVar & "Rus", FullTrim(PeopleRus))
	End If
	
	GoTo EndH
ErrH:
	Error Err, DesignElem & " -> " & GetThreadInfo(1) & ", c. " & CStr(Erl) & nLine & Error$
EndH:
End Sub

'++LotusScript Development Environment:2:2:DomenRecalc:1:8
Private Sub DomenRecalc(nm As Variant, oldDomen As String)
	On Error GoTo handler
	Const FuncName = {Function "DomenRecalc"}
	Dim ErrStr As String
	
	If InStr(nm, oldDomen) > 0 Then nm = Join(Split(nm, oldDomen), newDomen)

	GoTo endh
handler:
	ErrStr = FuncName & ": " & Err &", в стр " & Erl & nLine & Error$
	Error Err, ErrStr
endh:
End Sub


'++LotusScript Development Environment:2:1:RAA_recalculateAccessToMany:6:8
'********************************************
'Function RAA_recalculateAccessToMany
'Return Boolean
'Olimpus: Jan 26, 2021
'********************************************
Function RAA_recalculateAccessToMany (dc As NotesDocumentCollection, persons As Variant) As Boolean
	On Error GoTo ErrH
	
	Dim resTxt As String
	
	
	Dim doc As NotesDocument
	Set doc = dc.Getfirstdocument()
	While Not doc Is Nothing
		resTxt = resTxt & doc.Getitemvalue("externalNumber")(0) & " ~~~ " & doc.Getitemvalue("internalNumber")(0) & Chr(10)
		RAA_recalculateAccess doc, persons
		Set doc = dc.Getnextdocument(doc)
	Wend
	
'	If resTxt <> "" Then
'		RAA_recalculateAccessToMany = False
		MsgBox resTxT
'	Else
'		RAA_recalculateAccessToMany = True
'	End If
	RAA_recalculateAccessToMany = True


	GoTo EndH
ErrH:
	stop
	Error Err, DesignElem & " -> " & GetThreadInfo(1) & ", c. " & CStr(Erl) & nLine & Error$
	Resume endH
EndH:
End Function


'++LotusScript Development Environment:2:1:RAA_recalculateAccess:6:8
'********************************************
'Function RAA_recalculateAccess
'Return Boolean
'Olimpus: Jan 26, 2021
'********************************************
Function RAA_recalculateAccess (doc As NotesDocument, persons As Variant) As Boolean
	On Error GoTo ErrH

	Dim agr As AccessListAgreement
	Dim agrNew As AccessListAgreement
	Dim agrDoc As NotesDocument
	On Error 91 Resume next
	Set agr = Nothing
	Set agr = New AccessListAgreement
	Call agr.Initialize(doc)
	
	Set agrNew = Nothing
	Set agrNew = New AccessListAgreement
	Call agrNew.InitializeFull(doc)
	
	If Not agr.Equal(agrNew) Then
		If  agrNew.Save() Then Call CON_RecalcChildAccess(doc)
	End If
	On Error GoTo Errh
	Set agrDoc = CON_GetContractDb().Getdocumentbyunid(doc.Universalid)
	
	If TypeName(persons) = "NOTESDOCUMENTCOLLECTION" Then
		Dim person As NotesDocument
		Set person = persons.Getfirstdocument()
		While Not person Is Nothing 
			Call setPerson (agrDoc, person, "AccEditList")
			Set person = persons.Getnextdocument(person)
		Wend
	ElseIf TypeName(persons) = "NOTESDOCUMENT" Then
		Call setPerson (agrDoc, person, True)
	End If
	
	RAA_recalculateAccess =  agrDoc.save(False, agrDoc.Isresponse)
	
	GoTo EndH
ErrH:
	stop
	Error Err, DesignElem & " -> " & GetThreadInfo(1) & ", c. " & CStr(Erl) & nLine & Error$
	Resume endH
EndH:
End Function


