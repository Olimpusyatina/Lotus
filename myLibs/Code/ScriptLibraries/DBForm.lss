'++LotusScript Development Environment:2:5:(Options):0:74
'********************************************
'Library Form
'Olimpus: Sep 5, 2019
'********************************************
Option Public
Option Declare

'Use "DBSimpleElements"
Use "DBScriptLibrary"

'++LotusScript Development Environment:2:5:(Forward):0:1
Declare Class Form As interface
Declare Sub Initialize

'++LotusScript Development Environment:2:5:(Declarations):0:10

Private nLine As String
Private Const designElem = {Form}
'********************************************
'Class Form
'Olimpus: Sep 5, 2019
'********************************************
Class Form As interface
	Private formDoc As NotesDocument
	Private formName As String
	Private formAlias As String
	Private formUNID As String
	Private globalUseSection As Variant
	Private globalConstants As ObjectCollection
	Private events As ObjectCollection
	Private subForms As ObjectCollection
	Private actions As ObjectCollection
	Private actionBar As ActionBar
	Private version As String
	Private globalVariables As ObjectCollection
	Private options As Variant
	Private linkLibs As Variant
	
	Sub New (doc As notesdocument)
		On Error GoTo ErrH

		Set globalConstants = New ObjectCollection
		Set events = New ObjectCollection
		Set subForms = New ObjectCollection
		Set actions = New ObjectCollection
		Set globalVariables = New ObjectCollection
		
		ReDim options(0) As String
		ReDim linkLibs(0) As String
		
		Set formDoc = doc
		formName = formDoc.Getitemvalue(ELEMENT_NAME)(0)
		If SL_inString(formName, VERSION_TAG) Then
			version = StrRight(formName,VERSION_TAG)
			formName = StrLeft(formName, VERSION_TAG)
		Else
			version = LIB_DEFAULT_VERSION
		End If
				If doc.Getitemvalue("$Fields")(0) = "" Then GoTo Endh
		Dim s As New NotesSession
		Dim DXLExporter As NotesDXLExporter
		
		Set dom = s.Createdomparser()
		
		Set DXLExporter = s.Createdxlexporter(formDoc, dom)
		Call DXLExporter.Process()

		Dim docNode As NotesDOMDocumentNode			

		Set docNode = dom.Document
		
		Call parseForm(docNode)
		

		GoTo EndH
ErrH:
		Error Err, DesignElem & " -> " & TypeName(Me) & " -> " & GetThreadInfo(1) & ", c. " & CStr(Erl) & nLine & Error$ & nLine & formName
EndH:
	End Sub
	'********************************************
	'Function parseForm
	'Variant
	'Olimpus: Sep 10, 2019
	'********************************************
	Private Function parseForm(node As Variant)
		On Error GoTo ErrH

		Dim child As NotesDOMNode
		Dim elt As NotesDOMNode
		Dim attrs As NotesDOMNamedNodeMap
		Dim a As NotesDOMAttributeNode
		Dim piNode As NotesDOMProcessingInstructionNode
		Dim tag As String
		
		If Not node.IsNull Then  
			Select Case node.NodeType
			Case DOMNODETYPE_DOCUMENT_NODE:       
				Set child = node.FirstChild
				Dim numChildNodes As Integer
				numChildNodes = node.NumberOfChildNodes				
				While numChildNodes > 0 
					Call parseForm(child)
					numChildNodes = numChildNodes - 1
					Set child = child.Nextsibling
				Wend
			Case DOMNODETYPE_TEXT_NODE:           
				Select Case eventName
				Case EVENT_OPTIONS
							Call fillOptions(node.Nodevalue)
				Case EVENT_DECLARETIONS
							Call fillDeclaretions(node.Nodevalue)
				Case "click"
					Call fillButton(node.Nodevalue)
				Case ""
				Case Else
					'		Call fillMethod(eventName, node.Nodevalue)							
			End Select
				eventName = ""
			Case DOMNODETYPE_ELEMENT_NODE:
			
				'				If node.tagName = "code" Then
				tag = node.tagName
				'					Set a = node.Attributes.getItem(1)
				'					stop

				'					if a.NodeName = EVENT_OPTIONS Then Call fillOptions(node.FirstChild.NodeValue)
				'					If a.NodeName = EVENT_DECLARETIONS Then Call fillDeclaretions(node.FirstChild.NodeValue)
				'					If a.NodeName = "click" Then Call fillOptions(node.FirstChild.NodeValue)
				'					If a.NodeName = "queryopen" Then Call fillOptions(node.FirstChild.NodeValue)
				

				'				Else
				Set elt = node
				Dim numAttributes As Integer, numChildren As Integer
				numAttributes = elt.attributes.numberofentries
				
				Set attrs = elt.Attributes
				
				Dim i As Integer
				For i = 1 To numAttributes
					Set a = attrs.GetItem(i)
					If a.NodeName = EVENT_NODE_NAME Then eventName = a.NodeValue
				Next

				numChildren =  elt.NumberOfChildNodes
				Set child = elt.FirstChild
				While numChildren > 0
					Call parseForm(child)
					Set child = child.NextSibling
					numChildren = numChildren - 1
				Wend
				'				End If
				'				Set elt = node
				'				Dim numAttributes As Integer, numChildren As Integer
				'				numAttributes = elt.attributes.numberofentries
				'				
				'				Set attrs = elt.Attributes
				'				
				'				Dim i As Integer
				'				For i = 1 To numAttributes
				'					Set a = attrs.GetItem(i)
				'					If a.NodeName = EVENT_NODE_NAME Then eventName = a.NodeValue
				'				Next
				
				'				numChildren =  elt.NumberOfChildNodes
				'				Set child = elt.FirstChild
				'				While numChildren > 0
				'					Call parseForm(child)
				'					Set child = child.NextSibling
				'					numChildren = numChildren - 1
				'				Wend
		End Select
		End If
		
		GoTo EndH
ErrH:
		Error Err, DesignElem & " -> " & TypeName(Me) & " -> " & GetThreadInfo(1) & ", c. " & CStr(Erl) & nLine & Error$
EndH:
	End Function
	'********************************************
	'Function fillOptions
	'Variant
	'Olimpus: Sep 11, 2019
	'********************************************
	Function fillOptions(opts As String)
		On Error GoTo ErrH

		If (FullTrim(opts)) = "" Then GoTo EndH
		
		Dim optionCounter As Integer
		Dim linkLibsCounter As Integer
		Dim optionsArr As Variant
		Dim counter As Integer
		Dim comment As Boolean
		
		optionsArr = Split(SL_clearScript(opts), EOL) 	
		For counter = 0 To UBound(optionsArr)
			If SL_inString(optionsArr(counter), TAG_OPTION) Then
				ReDim Preserve options(optionCounter) As String
				options(optionCounter) = optionsArr(counter)
				optionCounter = optionCounter + 1
			ElseIf optionsArr(counter) <> "" Then
				ReDim Preserve linkLibs(linkLibsCounter) As String
				linkLibs(linkLibsCounter) = optionsArr(counter)
				linkLibsCounter = linkLibsCounter + 1
			End If			
		Next
		
		GoTo EndH
ErrH:
		Error Err, DesignElem & " -> " & TypeName(Me) & " -> " & GetThreadInfo(1) & ", c. " & CStr(Erl) & nLine & Error$ & nLine & "Form name = " & me.getName()
EndH:
	End Function
	'********************************************
	'Function fillDeclaretions
	'Variant
	'Olimpus: Sep 11, 2019
	'********************************************
	Function fillDeclaretions(declaration As String)
		On Error GoTo ErrH	
		
		If (FullTrim(declaration)) = "" Then GoTo EndH
		
		Dim decArr As Variant
		Dim counter As Integer
		Dim constant As Constant
		Dim declareFunction As DeclaredFunction
		Dim variable As Variable
		Dim userClass As userClass
		Dim userType As userType
		Dim blockText As String
		
		decArr = Split(SL_clearScript(declaration), EOL)
		
		For counter = 0 To UBound(decArr)
			If SL_inString(decArr(counter), TAG_CONST) Then
				Set constant = New Constant(decArr(counter))
				Call globalconstants.addObject(constant) 
			Else
				Set variable = New Variable (decArr(counter))
				Call globalvariables.addObject(variable)
			End If
		Next
		
		GoTo EndH
ErrH:
		Error Err, DesignElem & " -> " & TypeName(Me) & " -> " & GetThreadInfo(1) & ", c. " & CStr(Erl) & nLine & Error$
EndH:
	End Function
	'********************************************
	'Function fillButton
	'Variant
	'Olimpus: Sep 11, 2019
	'********************************************
	Function fillButton (btnText As String)
	On Error GoTo ErrH

	Dim action As New Action(btnText)
	Call actions.addObject(action)
	
	GoTo EndH
ErrH:
	Error Err, DesignElem & " -> " & TypeName(Me) & " -> " & GetThreadInfo(1) & ", c. " & CStr(Erl) & nLine & Error$
EndH:
	End Function
	'********************************************
	'Function getActions
	'ObjectCollectionb
	'Olimpus: Sep 11, 2019
	'********************************************
	Function getActions As ObjectCollection
	On Error GoTo ErrH

	Set getActions = actions
	
	GoTo EndH
ErrH:
	Error Err, DesignElem & " -> " & TypeName(Me) & " -> " & GetThreadInfo(1) & ", c. " & CStr(Erl) & nLine & Error$
EndH:
	End Function
	'********************************************
	'Function getName
	'String
	'Olimpus: Sep 11, 2019
	'********************************************
	Function getName As String
	On Error GoTo ErrH

	getName = formName
	
	GoTo EndH
ErrH:
	Error Err, DesignElem & " -> " & TypeName(Me) & " -> " & GetThreadInfo(1) & ", c. " & CStr(Erl) & nLine & Error$
EndH:
	End Function
End Class
'++LotusScript Development Environment:2:2:Initialize:2:10

Sub Initialize
	On Error GoTo ErrH
	nLine = Chr(10) & Chr(13)



	GoTo EndH
ErrH:
	Error Err, DesignElem & " -> " & GetThreadInfo(1) & ", c. " & CStr(ErL) & nLine & Error$ & nLine & Err
	Resume endH
EndH:
End Sub









